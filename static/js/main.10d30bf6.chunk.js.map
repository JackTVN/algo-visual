{"version":3,"sources":["page/lobby.js","component/CSelect.js","component/pathfind/pf_maze_solver.js","component/pathfind/pf_maze_creator.js","component/pathfind/pf_maze.js","component/CHook.js","component/pathfind/pf_node.js","component/pathfind/pf_node_solver.js","page/path_find.js","App.js","reportWebVitals.js","index.js"],"names":["Lobby","id","href","CSelect","className","option","current","handleChange","value","onChange","e","target","map","BFS_maze_onestep","maze","runState","copy","w","dimension","h","backtrack","x","P","end","y","start","H","Q","length","i","j","V","push","W","sort","first","second","tile","shift","VCount","UpT","DownT","LeftT","RightT","Astar_maze_onestep","Math","sqrt","pow","mainPlane","randomNumber","min","max","floor","random","IIDArrayValued","arr","Array","AddLineRecur","startH","startW","dir","splitLine","entrance","Recursive_Division_Maze","CheckNeighborTiles","p","possibleTile","Prim_Random_Maze","path","visited","tileH","tileW","pos","next","pop","updateMaze","put","startP","endP","newMazeState","height","width","UpdateInteract","mazePrev","select","selected","Node","props","draggable","state","highlight","onMouseDown","onDown","onMouseEnter","onDrag","TileInfo","c","d","toFixed","v","prev","PfMaze","useState","setheight","setwidth","setmaze","mazeInteract","setInteract","setput","mouseDown","setmouseDown","findType","setFind","isRunning","setRun","delay","setdelay","callback","savedCallback","useRef","useEffect","setInterval","clearInterval","useInterval","runResult","onMouseUp","htmlFor","type","name","isNaN","parseInt","onClick","style","backgroundColor","color","gridTemplateColumns","gridTemplateRows","line","indexy","indexx","weight","index","PathfindMaze","React","memo","nodeRef","fillColor","info","indexOf","console","log","axis","bounds","handle","position","updateLoc","grid","ref","onMouseDownCapture","onInteract","onTouchStartCapture","cx","cy","r","stroke","strokeWidth","fill","dominantBaseline","indexValue","updateNodeLocation","original","idx","newMap","splice","newNodeInfo","amount","indivInfo","nodeAmount","PfNode","setAmount","nodeLocation","setnodeLocation","nodeConnection","setConnection","nodeInfo","setnodeInfo","setPut","connectStart","setConnectStart","rect","getBoundingClientRect","pageY","top","pageX","left","addConnection","node1","index1","node2","index2","x1","y1","x2","y2","zIndex","node","deleteConnection","idx1","idx2","updateConnection","nInfo","filter","element","updateInfo","connection","n","BFS_node_onestep","PathfindNode","Pathfind","find","Pathfind_page","mapType","setmapType","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10d30bf6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//import {Helmet} from \"react-helmet\";\r\n\r\nimport './ss/lobby.scss';\r\n\r\nfunction Lobby() {\r\n\treturn (\r\n\t<div id=\"lobby\">\r\n\t\t<h1> Yoooooo </h1>\r\n\r\n        <a href=\"./#/path-find\"> Pathfind </a> \r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Lobby;","import React from 'react';\r\n\r\n//Default style for select\r\nimport './CSelect.scss';\r\n\r\nexport default function CSelect({className, option, current, handleChange}) {\r\n    return(\r\n    <select className={className} value={current} onChange={e => handleChange(e.target.value)} >    \r\n        { option.map(value =>\r\n            <option value={value} key={value}> {value} </option>\r\n        )}\r\n    </select>\r\n    )\r\n}","export function BFS_maze_onestep(maze) {\r\n    if (maze[1].runState === \"done\") {\r\n        return maze\r\n    }\r\n\r\n    let copy = [...maze]\r\n\r\n    let w = copy[1].dimension.w\r\n    let h = copy[1].dimension.h\r\n\r\n    // If the finding is done, and there's a route to the end\r\n    if (copy[1].runState === \"done_with_end\") {\r\n        if (copy[1].backtrack.x === -1) {\r\n            copy[1].backtrack.x = copy[1].P[copy[1].end.y][copy[1].end.x].x\r\n            copy[1].backtrack.y = copy[1].P[copy[1].end.y][copy[1].end.x].y\r\n        }\r\n        else {\r\n            copy[1].backtrack = { x: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].x, y: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].y }\r\n        }\r\n\r\n        if (copy[1].start.x === copy[1].backtrack.x && copy[1].start.y === copy[1].backtrack.y) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n\r\n        copy[1].H[copy[1].backtrack.y][copy[1].backtrack.x] = true\r\n\r\n        return copy\r\n    }\r\n\r\n    // If there are nothing in queue -> basically not initialized, get start point\r\n    if (copy[1].Q.length === 0) {\r\n        for (let i = 0; i < h; i++) {\r\n            for (let j = 0; j < w; j++) {\r\n                if (copy[0][i][j] === 'start' && !copy[1].V[i][j]) {\r\n                    copy[1].start = { y: i, x: j }\r\n                    copy[1].Q.push({ y: i, x: j, w: 0 })\r\n                    copy[1].W[i][j] = 0\r\n                    copy[1].P[i][j] = { y: i, x: j }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (copy[1].Q.length === 0) {\r\n        copy[1].runState = \"done\"\r\n        return copy\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    let tile = copy[1].Q.shift()\r\n    while (copy[1].V[tile.y][tile.x]) {\r\n        if (copy[1].Q.length === 0) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n        tile = copy[1].Q.shift()\r\n    }\r\n\r\n    copy[1].V[tile.y][tile.x] = true\r\n    copy[1].VCount++\r\n\r\n    if (copy[1].end.y === tile.y && copy[1].end.x === tile.x) {\r\n        copy[1].runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    let UpT = { x: tile.x, y: tile.y - 1 }\r\n    let DownT = { x: tile.x, y: tile.y + 1 }\r\n    let LeftT = { x: tile.x - 1, y: tile.y }\r\n    let RightT = { x: tile.x + 1, y: tile.y }\r\n\r\n    if (UpT.y >= 0 && !copy[1].V[UpT.y][UpT.x] && copy[0][UpT.y][UpT.x] !== \"inf\") {\r\n        copy[1].W[UpT.y][UpT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: UpT.y, x: UpT.x, w: copy[1].W[UpT.y][UpT.x] })\r\n        copy[1].P[UpT.y][UpT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n    if (DownT.y < h && !copy[1].V[DownT.y][DownT.x] && copy[0][DownT.y][DownT.x] !== \"inf\") {\r\n        copy[1].W[DownT.y][DownT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: DownT.y, x: DownT.x, w: copy[1].W[DownT.y][DownT.x] })\r\n        copy[1].P[DownT.y][DownT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n    if (LeftT.x >= 0 && !copy[1].V[LeftT.y][LeftT.x] && copy[0][LeftT.y][LeftT.x] !== \"inf\") {\r\n        copy[1].W[LeftT.y][LeftT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: LeftT.y, x: LeftT.x, w: copy[1].W[LeftT.y][LeftT.x] })\r\n        copy[1].P[LeftT.y][LeftT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n    if (RightT.x < w && !copy[1].V[RightT.y][RightT.x] && copy[0][RightT.y][RightT.x] !== \"inf\") {\r\n        copy[1].W[RightT.y][RightT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: RightT.y, x: RightT.x, w: copy[1].W[RightT.y][RightT.x] })\r\n        copy[1].P[RightT.y][RightT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    return copy\r\n}\r\n\r\nexport function Astar_maze_onestep(maze) {\r\n    if (maze[1].runState === \"done\") {\r\n        return maze\r\n    }\r\n\r\n    let copy = [...maze]\r\n\r\n    let w = copy[1].dimension.w\r\n    let h = copy[1].dimension.h\r\n\r\n    if (copy[1].runState === \"done_with_end\") {\r\n        if (copy[1].backtrack.x === -1) {\r\n            copy[1].backtrack.x = copy[1].P[copy[1].end.y][copy[1].end.x].x\r\n            copy[1].backtrack.y = copy[1].P[copy[1].end.y][copy[1].end.x].y\r\n        }\r\n        else {\r\n            copy[1].backtrack = { x: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].x, y: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].y }\r\n        }\r\n\r\n        if (copy[1].start.x === copy[1].backtrack.x && copy[1].start.y === copy[1].backtrack.y) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n\r\n        copy[1].H[copy[1].backtrack.y][copy[1].backtrack.x] = true\r\n\r\n        return copy\r\n    }\r\n\r\n    // If there are nothing in queue -> basically not initialized\r\n    if (copy[1].Q.length === 0) {\r\n        for (let i = 0; i < h; i++) {\r\n            for (let j = 0; j < w; j++) {\r\n                if (copy[0][i][j] === 'start' && !copy[1].V[i][j]) {\r\n                    copy[1].start = { y: i, x: j }\r\n                    copy[1].Q.push({ y: i, x: j, w: 0 })\r\n                    copy[1].W[i][j] = 0\r\n                    copy[1].P[i][j] = { y: i, x: j }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (copy[1].Q.length === 0) {\r\n        copy[1].runState = \"done\"\r\n        return copy\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => {\r\n        return (Math.sqrt(Math.pow(first.x - copy[1].end.x, 2) + Math.pow(first.y - copy[1].end.y, 2))) * 2 + first.w -\r\n            (Math.sqrt(Math.pow(second.x - copy[1].end.x, 2) + Math.pow(second.y - copy[1].end.y, 2))) * 2 - second.w\r\n    })\r\n\r\n    let tile = copy[1].Q.shift()\r\n    while (copy[1].V[tile.y][tile.x]) {\r\n        if (copy[1].Q.length === 0) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n        tile = copy[1].Q.shift()\r\n    }\r\n\r\n    copy[1].V[tile.y][tile.x] = true\r\n    copy[1].VCount++\r\n\r\n    if (copy[1].end.y === tile.y && copy[1].end.x === tile.x) {\r\n        copy[1].runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    let UpT = { x: tile.x, y: tile.y - 1 }\r\n    let DownT = { x: tile.x, y: tile.y + 1 }\r\n    let LeftT = { x: tile.x - 1, y: tile.y }\r\n    let RightT = { x: tile.x + 1, y: tile.y }\r\n\r\n    if (UpT.y >= 0 && !copy[1].V[UpT.y][UpT.x] && copy[0][UpT.y][UpT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[UpT.y][UpT.x]) {\r\n            copy[1].W[UpT.y][UpT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: UpT.y, x: UpT.x, w: copy[1].W[UpT.y][UpT.x] })\r\n            copy[1].P[UpT.y][UpT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (DownT.y < h && !copy[1].V[DownT.y][DownT.x] && copy[0][DownT.y][DownT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[DownT.y][DownT.x]) {\r\n            copy[1].W[DownT.y][DownT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: DownT.y, x: DownT.x, w: copy[1].W[DownT.y][DownT.x] })\r\n            copy[1].P[DownT.y][DownT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (LeftT.x >= 0 && !copy[1].V[LeftT.y][LeftT.x] && copy[0][LeftT.y][LeftT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[LeftT.y][LeftT.x]) {\r\n            copy[1].W[LeftT.y][LeftT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: LeftT.y, x: LeftT.x, w: copy[1].W[LeftT.y][LeftT.x] })\r\n            copy[1].P[LeftT.y][LeftT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (RightT.x < w && !copy[1].V[RightT.y][RightT.x] && copy[0][RightT.y][RightT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[RightT.y][RightT.x]) {\r\n            copy[1].W[RightT.y][RightT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: RightT.y, x: RightT.x, w: copy[1].W[RightT.y][RightT.x] })\r\n            copy[1].P[RightT.y][RightT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => {\r\n        return (Math.sqrt(Math.pow(first.x - copy[1].end.x, 2) + Math.pow(first.y - copy[1].end.y, 2))) * 2 + first.w -\r\n            (Math.sqrt(Math.pow(second.x - copy[1].end.x, 2) + Math.pow(second.y - copy[1].end.y, 2))) * 2 - second.w\r\n    })\r\n\r\n    return copy\r\n}","/*\r\n    How do these thing work?\r\n\r\n    1. Create the entire maze, in list[list] form\r\n    2. Everytime a tile is modified in the maze, put it in a list of change\r\n    \r\n    When the maze app want to create a maze, the function will try to make a maze as fast as possible, then give back the list of tile modify to the app\r\n    The app then just has to replicate the change! easy\r\n*/\r\n\r\nvar mainPlane = null;\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction IIDArrayValued(h, w, value) {\r\n    let arr = Array(h);\r\n\r\n    for (let i = 0; i < h; i++){\r\n        arr[i] = Array(w);\r\n        for (let j = 0; j < w; j++){\r\n            arr[i][j] = value;\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nfunction AddLineRecur(startH, H, startW, W, dir) {\r\n    if (dir === \"vertical\"){\r\n        if (W - startW < 2) {\r\n            return;\r\n        }\r\n\r\n        let splitLine = Math.floor(randomNumber(startW + 1, W - 1) / 2) * 2 + 1\r\n        \r\n        for (let i = startH; i <= H; i++){\r\n            mainPlane[i][splitLine] = \"inf\"\r\n        }\r\n\r\n        let entrance = Math.floor(randomNumber(startH, H - 1) / 2) * 2\r\n\r\n        mainPlane[entrance][splitLine] = 1\r\n\r\n        AddLineRecur(startH, H, startW, splitLine - 1, \"horizontal\")\r\n        AddLineRecur(startH, H, splitLine + 1, W, \"horizontal\")\r\n    }\r\n    else {\r\n        if (H - startH < 2) {\r\n            return;\r\n        }\r\n\r\n        let splitLine = Math.floor(randomNumber(startH + 1, H - 1) / 2) * 2 + 1\r\n\r\n        for (let i = startW; i <= W; i++){\r\n            mainPlane[splitLine][i] = \"inf\"\r\n        }\r\n\r\n        let entrance = Math.floor(randomNumber(startW, W - 1) / 2) * 2\r\n\r\n        mainPlane[splitLine][entrance] = 1\r\n\r\n        AddLineRecur(startH, splitLine - 1, startW, W, \"vertical\")\r\n        AddLineRecur(splitLine + 1, H, startW, W, \"vertical\")\r\n    }\r\n}\r\n\r\nexport function Recursive_Division_Maze(h, w) {\r\n    mainPlane = null\r\n    mainPlane = IIDArrayValued(h, w, 1)\r\n\r\n    // Fill some edge to get an odd length and width\r\n    if (h % 2 === 0){\r\n        h--\r\n        for (let i = 0; i < w; i++){\r\n            mainPlane[h][i] = \"inf\"\r\n        }\r\n    }\r\n\r\n    if (w % 2 === 0){\r\n        w--\r\n        for (let i = 0; i < h; i++){\r\n            mainPlane[i][w] = \"inf\"\r\n        }\r\n    }\r\n\r\n    AddLineRecur(0, h - 1, 0, w - 1, \"vertical\")\r\n\r\n    return mainPlane;\r\n}\r\n\r\nfunction CheckNeighborTiles(p, h, w){\r\n    let possibleTile = []\r\n\r\n    let UpT    = {x: p.x, y: p.y - 1}\r\n    let DownT  = {x: p.x, y: p.y + 1}\r\n    let LeftT  = {x: p.x - 1, y: p.y}\r\n    let RightT = {x: p.x + 1, y: p.y}\r\n\r\n    if ( UpT.y >= 0 && mainPlane[UpT.y * 2][ UpT.x * 2] === \"inf\")\r\n        possibleTile.push(UpT)\r\n    if ( DownT.y <= h && mainPlane[DownT.y * 2][ DownT.x * 2] === \"inf\")\r\n        possibleTile.push(DownT)\r\n    if ( LeftT.x >= 0 && mainPlane[LeftT.y * 2][ LeftT.x * 2] === \"inf\")\r\n        possibleTile.push(LeftT)\r\n    if ( RightT.x <= w && mainPlane[RightT.y * 2][ RightT.x * 2] === \"inf\")\r\n        possibleTile.push(RightT)\r\n\r\n    if (possibleTile.length === 0)\r\n        return p\r\n    else\r\n        return possibleTile[Math.floor(Math.random()*possibleTile.length)]\r\n\r\n}\r\n\r\nexport function Prim_Random_Maze(h, w) {\r\n    mainPlane = null\r\n    mainPlane = IIDArrayValued(h, w, \"inf\")\r\n\r\n    let path = []\r\n    let visited = 1\r\n\r\n    let tileH = Math.floor((h - 1) / 2)\r\n    let tileW = Math.floor((w - 1) / 2)\r\n\r\n    let pos = {x: randomNumber(0, tileW), y: randomNumber(0, tileH)}\r\n\r\n    mainPlane[pos.y * 2][pos.x * 2] = 1\r\n\r\n    path.push(pos)\r\n\r\n    while (visited < (tileH + 1) * (tileW + 1)) {\r\n        let next = CheckNeighborTiles(pos, tileH, tileW)\r\n\r\n        if (next === pos) pos = path.pop()\r\n        else {\r\n            mainPlane[next.y * 2][next.x * 2] = 1\r\n            mainPlane[next.y + pos.y][next.x + pos.x] = 1\r\n            path.push(next)\r\n            pos = next\r\n            visited++\r\n        }\r\n    }\r\n\r\n    return mainPlane;\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { useInterval } from '../CHook.js';\r\nimport { BFS_maze_onestep, Astar_maze_onestep } from './pf_maze_solver.js';\r\nimport { Prim_Random_Maze, Recursive_Division_Maze } from './pf_maze_creator.js';\r\n\r\nimport CSelect from '../CSelect.js';\r\n\r\n//import { Icons } from '../../resources/icon.js'\r\n\r\nimport './pf_maze.scss';\r\n\r\nfunction IIDArrayValued(h, w, value) {\r\n    let arr = Array(h);\r\n\r\n    for (let i = 0; i < h; i++) {\r\n        arr[i] = Array(w);\r\n        for (let j = 0; j < w; j++) {\r\n            arr[i][j] = value;\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nfunction updateMaze(maze, put, y, x) {\r\n    if (put === -1) {\r\n        return maze;\r\n    }\r\n\r\n    let copy = [...maze];\r\n\r\n    let startP = copy[1].start;\r\n    let endP = copy[1].end;\r\n\r\n    if (put === 'start') {\r\n        copy[1].start = { y: y, x: x }\r\n\r\n        if (startP.x !== -1) {\r\n            copy[0][startP.y][startP.x] = 1;\r\n        }\r\n    }\r\n    else if (put === 'end') {\r\n        copy[1].end = { y: y, x: x }\r\n\r\n        if (endP.x !== -1) {\r\n            copy[0][endP.y][endP.x] = 1;\r\n        }\r\n    }\r\n    else {\r\n        if (startP.x === x && startP.y === y) copy[1].start = { y: -1, x: -1 }\r\n        if (endP.x === x && endP.y === y) copy[1].end = { y: -1, x: -1 }\r\n    }\r\n    copy[0][y][x] = put;\r\n\r\n    return copy;\r\n}\r\n\r\nfunction newMazeState(height, width, start = { y: -1, x: -1 }, end = { y: -1, x: -1 },) {\r\n    /*\r\n        maze object (at the start of the main func) has the 1st value as the entire maze in a 2d array, and the 2nd value as all the important thing\r\n        in the maze (Starting point, Ending point, Priority Queue)\r\n    */\r\n\r\n    return {\r\n        start: start, // Start\r\n        end: end, // End\r\n        backtrack: { y: -1, x: -1 }, // Backtrack to work with highlighting end point\r\n        dimension: { h: height, w: width }, // Width and Height\r\n        W: IIDArrayValued(height, width, 1000000), // Weight\r\n        V: IIDArrayValued(height, width, false), // Visited\r\n        VCount: 0,\r\n        Q: [], // Queue\r\n        P: IIDArrayValued(height, width, null), // Tile of previous movement\r\n        H: IIDArrayValued(height, width, false), // Highlight\r\n        runState: \"run\",\r\n    }\r\n    /* TLDR: maze[1][0] would be the start, [1][1] would be the end, and [1][3] Priority Queue */\r\n}\r\n\r\nfunction UpdateInteract(mazePrev, select) {\r\n    if (mazePrev.selected.y === select.y && mazePrev.selected.x === select.x) {\r\n        return {\r\n            selected: {y: -1, x: -1}\r\n        }\r\n    }\r\n    return {\r\n        selected: { y: select.y, x: select.x }, // Selected Tile\r\n    }\r\n}\r\n\r\nfunction Node(props) {\r\n    return (\r\n        <div draggable='false' \r\n            className={\r\n                'maze_node mstate' + props.state + (props.visited ? \"visited\" : \"\") + (props.highlight ? \"highlight\" : \"\")\r\n                + (props.selected ? \" selectedTile\" : \"\")\r\n            }\r\n            onMouseDown={props.onDown} onMouseEnter={props.onDrag}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TileInfo(props) {\r\n    return (\r\n        <div id=\"tile_info\">\r\n            <div> Position: {props.pos.y + 1} x {props.pos.x + 1} </div>\r\n            <div> Cost to: {props.c}</div>\r\n            <div> Weight: {props.w === 1000000 ? \"Infinite\" : props.w} </div>\r\n            {props.d === null ? <div /> : <div> Distance to endpoint: {props.d.toFixed(2)} </div>}\r\n\r\n            <div> Visited: {props.v === true ? \"True\" : \"False\"} </div>\r\n            {props.prev === null ? <div> Previous Tile: None </div> : <div> Previous Tile: {props.prev.y + 1} x {props.prev.x + 1} </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PfMaze(props) {\r\n    const [height, setheight] = useState(10)\r\n    const [width, setwidth] = useState(20)\r\n    const [maze, setmaze] = useState([IIDArrayValued(height, width, 1), newMazeState(height, width)])\r\n    const [mazeInteract, setInteract] = useState({selected:{y: -1, x: -1}})\r\n    const [put, setput] = useState(1)\r\n    const [mouseDown, setmouseDown] = useState(false)\r\n    const [findType, setFind] = useState(\"BFS\")\r\n\r\n    // Player states\r\n    const [isRunning, setRun] = useState(false)\r\n    const [delay, setdelay] = useState(1)\r\n\r\n    useInterval(() => {\r\n        let runResult = findType === \"A*\" ? Astar_maze_onestep(maze) : BFS_maze_onestep(maze)\r\n        setmaze(runResult)\r\n        if (runResult[1].runState === \"done\") setRun(false)\r\n\r\n    }, isRunning ? delay : null);\r\n\r\n    useEffect(() => {\r\n        setInteract(UpdateInteract(mazeInteract, {y: -1, x: -1}))\r\n        setmaze([IIDArrayValued(height, width, 1), newMazeState(height, width)])\r\n    }, [height])\r\n\r\n    useEffect(() => {\r\n        setInteract(UpdateInteract(mazeInteract, {y: -1, x: -1}))\r\n        setmaze([IIDArrayValued(height, width, 1), newMazeState(height, width)])\r\n    }, [width])\r\n\r\n    return (\r\n        <div id=\"pf_workspace\" onMouseDown={() => setmouseDown(true)} onMouseUp={() => setmouseDown(false)}>\r\n            <div id='pf_map_info'>\r\n                <label htmlFor='pf_option_h'>Height</label>\r\n                <input type='number' id='pf_option_h' name='pf_option_h'\r\n                    onChange={e => setheight(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? (parseInt(e.target.value) < 30 ? parseInt(e.target.value) : 29) : 1)}\r\n                />\r\n                <label htmlFor='pf_option_w'>Width</label>\r\n                <input type='number' id='pf_option_w' name='pf_option_w'\r\n                    onChange={e => setwidth(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? (parseInt(e.target.value) < 60 ? parseInt(e.target.value) : 59) : 1)}\r\n                />\r\n                <CSelect className='pf_option_search' option={['BFS', 'A*', 'Placeholder 2 ', 'Placeholder 3  ']} current={findType} handleChange={setFind} />\r\n                <CSelect className='pf_option_create' option={['', 'Recursive Division', 'Prim (Random Run)']} current=''\r\n                    handleChange={(value) => {\r\n                        if (value === \"Recursive Division\")\r\n                            setmaze([Recursive_Division_Maze(height, width), newMazeState(height, width)])\r\n                        if (value === 'Prim (Random Run)')\r\n                            setmaze([Prim_Random_Maze(height, width), newMazeState(height, width)])\r\n                    }}\r\n                />\r\n            </div>\r\n            <div id='pf_item'>\r\n                <button id='map_clear' onClick={() => setmaze([IIDArrayValued(height, width, 1), newMazeState(height, width)])}>\r\n                    Clear\r\n                    <span className='tooltip'> Clear all tiles </span>\r\n                </button>\r\n                <button id='map_start_point' onClick={() => put === 'start' ? setput(-1) : setput('start')}\r\n                    style={{ backgroundColor: put === 'start' ? '#5e5e5e' : '#101010', color: put === 'start' ? '#101010' : '#fafafa' }}>\r\n                    Start\r\n                    <span className='tooltip'> Next Tile click will determine the start point </span>\r\n                </button>\r\n                <button id='map_end_point' onClick={() => put === 'end' ? setput(-1) : setput('end')}\r\n                    style={{ backgroundColor: put === 'end' ? '#5e5e5e' : '#101010', color: put === 'end' ? '#101010' : '#fafafa' }}>\r\n                    End\r\n                    <span className='tooltip'> Next Tile click will determine the end point </span>\r\n                </button>\r\n                <button id='map_draw' onClick={() => put === \"inf\" ? setput(-1) : setput(\"inf\")}\r\n                    style={{ backgroundColor: put === \"inf\" ? '#5e5e5e' : '#101010', color: put === \"inf\" ? '#101010' : '#fafafa' }}>\r\n                    Draw\r\n                    <span className='tooltip'> Set tile to wall with weight infinite </span>\r\n                </button>\r\n                <button id='map_delete' onClick={() => put === 1 ? setput(-1) : setput(1)}\r\n                    style={{ backgroundColor: put === 1 ? '#5e5e5e' : '#101010', color: put === 1 ? '#101010' : '#fafafa' }}>\r\n                    Delete\r\n                    <span className='tooltip'> Set tile to nothing with weight 0 </span>\r\n                </button>\r\n                <button id='map_select' onClick={() => put === setput('select')}\r\n                    style={{ backgroundColor: put === 'select' ? '#5e5e5e' : '#101010', color: put === 'select' ? '#101010' : '#fafafa' }}>\r\n                    Select\r\n                    <span className='tooltip'> Select a tile to view its info </span>\r\n                </button>\r\n            </div>\r\n            <div id='pf_screen'>\r\n                <div id='pf_map' style={{ gridTemplateColumns: \"repeat(\" + width + \", 1fr)\", gridTemplateRows: \"repeat(\" + height + \", 1fr)\" }}>\r\n                    {\r\n                        /* \r\n                            Maze is an array with an array in it (2D Array), first map get one line of the array and pass it with its index \r\n                            The line is then map again to individual value, pass with the index of the index of the value (indexx)\r\n                            indexy*height + indexx make sure every key is unique so the app don't cry in pain\r\n                        */\r\n                        maze[0].map((line, indexy) => line.map((tile, indexx) =>\r\n                            <Node state={tile} key={indexy * width + indexx}\r\n                                visited={maze[1].V[indexy][indexx]}\r\n                                selected={indexy === mazeInteract.selected.y && indexx === mazeInteract.selected.x}\r\n                                highlight={maze[1].H[indexy][indexx]}\r\n                                weight={maze[1].W[indexy][indexx]}\r\n                                onDown={() => put === \"select\" ? setInteract(UpdateInteract(mazeInteract, {y: indexy, x: indexx})) : setmaze(updateMaze(maze, put, indexy, indexx))}\r\n                                onDrag={() => put === \"select\" && mouseDown ? setInteract(UpdateInteract(mazeInteract, {y: indexy, x: indexx})) : setmaze(updateMaze(maze, mouseDown ? put : -1, indexy, indexx))}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div id='pf_info'>\r\n                    <div id='pf_maze_player'>\r\n                        <button id='pf_player_run' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setRun(!isRunning)}> Play\r\n                        </button>\r\n                        <button id='pf_player_step' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setmaze(findType === \"A*\" ? Astar_maze_onestep(maze) : BFS_maze_onestep(maze))}> Step\r\n                        </button>\r\n                        <button id='pf_player_reset' style={{ backgroundColor: '#101010' }}\r\n                            onClick={() => {\r\n                                setRun(false)\r\n                                setmaze([maze[0], newMazeState(height, width, maze[1].start, maze[1].end)])\r\n                            }}>\r\n                            Reset\r\n                        </button>\r\n                        <label htmlFor='pf_player_delay'>Delay</label>\r\n                        <input type='number' id='pf_player_delay' name='pf_player_delay'\r\n                            onChange={e => setdelay(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? parseInt(e.target.value) : 1)}\r\n                        />\r\n                    </div>\r\n                    <div id='pf_maze_log'>\r\n                        <div id='pf_maze_visit_count'> Tile visited: {maze[1].VCount} </div>\r\n                        <div id='pf_tile_info'>\r\n                            {\r\n                                mazeInteract.selected.x === -1 ? <div id=\"tile_info\" /> :\r\n                                    <TileInfo\r\n                                        pos={mazeInteract.selected}\r\n                                        c={maze[0][mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                        w={maze[1].W[mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                        d={\r\n                                            findType !== \"A*\" ? null :\r\n                                                maze[1].end.x !== -1 ?\r\n                                                    Math.sqrt(Math.pow(mazeInteract.selected.x - maze[1].end.x, 2) + Math.pow(mazeInteract.selected.y - maze[1].end.y, 2)) :\r\n                                                    null\r\n                                        }\r\n                                        v={maze[1].V[mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                        prev={maze[1].P[mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                    />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <ul id='pf_maze_queue'>\r\n                        {\r\n                            maze[1].Q.length === 0 ? <div id=\"empty_queue\" /> :\r\n                                maze[1].Q.map((path, index) => {\r\n                                    return (\r\n                                        <li id=\"path_queue\" key={index} onClick={() => setInteract(UpdateInteract(mazeInteract, {y: path.y, x: path.x}))}>\r\n                                            {index}. Position: {path.y} x {path.x}, Weight {findType !== \"A*\" ? \"\" : \"+ Distance * 2\"}: {\r\n                                                    (path.w + 2 * (findType !== \"A*\" ? 0 : \r\n                                                    Math.sqrt(Math.pow(path.x - maze[1].end.x, 2) + Math.pow(path.y - maze[1].end.y, 2))\r\n                                                    )).toFixed(2)\r\n                                                }\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const PathfindMaze = React.memo(PfMaze);","import { useState, useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport function useMousePosition() {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const setFromEvent = (e) => setPosition({ x: e.clientX, y: e.clientY });\r\n    window.addEventListener(\"mousemove\", setFromEvent);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", setFromEvent);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n};","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Draggable from 'react-draggable';\r\n\r\nimport { useInterval } from '../CHook.js';\r\n\r\nimport CSelect from '../CSelect.js';\r\nimport { BFS_node_onestep, Astar_node_onestep } from './pf_node_solver.js';\r\n\r\nimport './pf_node.scss';\r\n\r\nfunction Node(props) {\r\n    //https://stackoverflow.com/a/63603903\r\n\r\n    // Selfnote: add (props.info.length === 0 ? \"\" : \" \" + props.info.join(\" \")) to the div if need to do multiple class\r\n\r\n    const nodeRef = React.useRef(null);\r\n\r\n    let fillColor = \"#000000\"\r\n\r\n    \r\n\r\n    if (props.info.indexOf('start') + 1) {\r\n        fillColor = \"rgb(90, 155, 25)\"\r\n    }\r\n\r\n    console.log(props.info.indexOf('start'));\r\n\r\n    return (\r\n        <Draggable nodeRef={nodeRef}\r\n            axis=\"both\"\r\n            bounds=\"parent\"\r\n            handle={null}\r\n            position={{y: props.y, x: props.x}}\r\n            onDrag={props.updateLoc}\r\n            grid={null}\r\n        >\r\n            <div id=\"pf_div_node_holder\" ref={nodeRef} onMouseDownCapture={props.onInteract} onTouchStartCapture={props.onInteract}>\r\n                <svg id={\"pf_node\"} width=\"44\" height=\"44\">\r\n                    <circle cx=\"22\" cy=\"22\" r=\"20\" stroke=\"#fafafa\" strokeWidth=\"1\" fill={fillColor}/>\r\n                    <text id=\"pf_node_text\" dominantBaseline=\"middle\" x=\"50%\" y=\"50%\" fill=\"#fafafa\">{props.indexValue + 1}</text>\r\n                </svg>\r\n            </div>\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nfunction updateNodeLocation(original, idx, y, x) {\r\n    let newMap = [...original]\r\n\r\n    if (y === -1) {\r\n        newMap.splice(idx, 1)\r\n        return newMap\r\n    }\r\n\r\n    if (idx >= original.length) {\r\n        newMap.push({y: y, x: x})\r\n        return newMap\r\n    }\r\n\r\n    newMap[idx].y = y\r\n    newMap[idx].x = x\r\n\r\n    return newMap\r\n}\r\n\r\nfunction updateConnection(original, idx1, idx2) {\r\n    let newMap = [...original]\r\n\r\n    newMap[idx1][idx2] = newMap[idx1][idx2] === 1 ? 0 : 1\r\n    newMap[idx2][idx1] = newMap[idx2][idx1] === 1 ? 0 : 1\r\n\r\n    return newMap\r\n}\r\n\r\nfunction deleteConnection(original, idx) {\r\n    let newMap = [...original]\r\n\r\n    newMap.splice(idx, 1)\r\n\r\n    for (let i = 0; i < newMap.length; i++) {\r\n        newMap[i].splice(idx, 1)\r\n    }\r\n\r\n    return newMap\r\n}\r\n\r\nfunction addConnection(original, idx) {\r\n    let newMap = [...original]\r\n\r\n    newMap.push(new Array(original.length).fill(0))\r\n\r\n    for (let i = 0; i < newMap.length; i++) {\r\n        newMap[i].push(0)\r\n    }\r\n\r\n    return newMap\r\n}\r\n\r\nfunction newNodeInfo(amount, start = -1, end = -1) {\r\n    return {\r\n        indivInfo: new Array(amount).fill([]),\r\n        start: start,\r\n        end: end,\r\n        backtrack: -1, // Backtrack to work with highlighting end point\r\n        nodeAmount: 1, // Width and Height\r\n        W: new Array(amount).fill(10000000), // Weight\r\n        V: new Array(amount).fill(false), // Visited\r\n        VCount: 0,\r\n        Q: [], // Queue\r\n        P: new Array(amount).fill(null), // Node of previous movement\r\n        H: new Array(amount).fill(false), // Highlight\r\n        runState: \"run\",\r\n    }\r\n}\r\n\r\nfunction PfNode(props) {\r\n    const [mouseDown, setmouseDown] = useState(false)\r\n    const [nodeAmount, setAmount] = useState(2)\r\n    const [nodeLocation, setnodeLocation] = useState([{x: 0, y: 0}, {x: 40, y: 40}])\r\n    const [nodeConnection, setConnection] = useState([[0,1],[1,0]])\r\n    const [nodeInfo, setnodeInfo] = useState(newNodeInfo(2))\r\n\r\n    const [findType, setFind] = useState(\"BFS\")\r\n\r\n    // Controller\r\n    const [put, setPut] = useState(0)\r\n    const [connectStart, setConnectStart] = useState(-1)\r\n\r\n    \r\n    // Player states\r\n    const [isRunning, setRun] = useState(false)\r\n    const [delay, setdelay] = useState(1)\r\n\r\n    /*\r\n    useInterval(() => {\r\n        let runResult = props.find === \"A*\" ? Astar_node_onestep(maze) : BFS_node_onestep(maze)\r\n        setmaze(runResult)\r\n        if (runResult[1].runState === \"done\") setRun(false)\r\n\r\n    }, isRunning ? delay : null);\r\n    */\r\n\r\n    const updateInfo = (pos, value) => {\r\n        let copy = nodeInfo\r\n        if (value === \"start\" || value === \"end\") {\r\n            // Go to every element on the list of info, each element is a list of basically effect, and remove the effect that is == to value\r\n            copy.indivInfo.map(nInfo => nInfo = nInfo.filter(element => element !== value))\r\n        }\r\n        copy.indivInfo[pos].push(value)\r\n        setnodeInfo(copy)\r\n    }\r\n\r\n    return (\r\n        <div id=\"pf_node_workspace\">\r\n            <div id=\"pf_node_info\">\r\n                <CSelect className='pf_option_search' option={['BFS', 'A*', 'Placeholder 2 ', 'Placeholder 3  ']} current={findType} handleChange={setFind} />\r\n            </div>\r\n            <div id=\"pf_node_item\">\r\n                <button id='node_add' onClick={() => put === 1 ? setPut(0) : setPut(1)}\r\n                    style={{ backgroundColor: put === 1 ? '#5e5e5e' : '#101010', color: put === 1 ? '#101010' : '#fafafa' }}>\r\n                    Draw\r\n                    <span className='tooltip'> Add a node </span>\r\n                </button>\r\n                <button id='node_delete' onClick={() => put === -1 ? setPut(0) : setPut(-1)}\r\n                    style={{ backgroundColor: put === -1 ? '#5e5e5e' : '#101010', color: put === -1 ? '#101010' : '#fafafa' }}>\r\n                    Delete\r\n                    <span className='tooltip'> Delete a node </span>\r\n                </button>\r\n                <button id='node_connect' onClick={ () => {if (put === \"connect\") { setPut(0) } else {setPut(\"connect\"); setConnectStart(-1)}} }\r\n                    style={{ backgroundColor: put === \"connect\" ? connectStart !== -1 ? '#ffff7f' : '#5e5e5e' : '#101010', color: put === \"connect\" ? '#101010' : '#fafafa' }}>\r\n                    Connect\r\n                    <span className='tooltip'> Connect 2 node </span>\r\n                </button>\r\n                <button id='node_start_point' onClick={() => put === 'start' ? setPut(0) : setPut('start')}\r\n                    style={{ backgroundColor: put === 'start' ? '#5e5e5e' : '#101010', color: put === 'start' ? '#101010' : '#fafafa' }}>\r\n                    Start\r\n                    <span className='tooltip'> Next Node click will determine the start point </span>\r\n                </button>\r\n                <button id='node_end_point' onClick={() => put === 'end' ? setPut(0) : setPut('end')}\r\n                    style={{ backgroundColor: put === 'end' ? '#5e5e5e' : '#101010', color: put === 'end' ? '#101010' : '#fafafa' }}>\r\n                    End\r\n                    <span className='tooltip'> Next Node click will determine the end point </span>\r\n                </button>\r\n            </div>\r\n            <div id=\"pf_node_screen\" onMouseDown={() => setmouseDown(true)} onMouseUp={() => setmouseDown(false)}>\r\n                <div id=\"pf_node_map\" style={{position: \"relative\"}}\r\n                    onClick = {(e) => {\r\n                        let rect = e.target.getBoundingClientRect()\r\n                        if (put === 1) {\r\n                            setnodeLocation(updateNodeLocation(nodeLocation, nodeAmount, e.pageY - rect.top - 22, e.pageX - rect.left - 22))\r\n                            setConnection(addConnection(nodeConnection, nodeAmount))\r\n                            setAmount(nodeAmount + 1)\r\n                        }\r\n                    }}\r\n                >\r\n                    <svg id=\"pf_node_pathDraw\" style={{ height: \"100%\", width: \"100%\", position: 'absolute', top: '0px', left: '0px'}}>\r\n                            {nodeConnection.map((node1, index1) => node1.map((node2, index2) => {\r\n                                if (index1 != null && index2 != null && index2 > index1 && node2 === 1) {\r\n                                    return (\r\n                                    <line \r\n                                        key = {index1 * nodeAmount + index2}\r\n                                        x1 = {nodeLocation[index1].x + 22}\r\n                                        y1 = {nodeLocation[index1].y + 22}\r\n                                        x2 = {nodeLocation[index2].x + 22}\r\n                                        y2 = {nodeLocation[index2].y + 22}\r\n                                        style = {{ stroke: \"rgb(239,239,239)\", strokeWidth: \"1\" }}\r\n                                    />\r\n                                    )\r\n                                }\r\n                            })\r\n                            )}\r\n                    </svg>\r\n                    <div id=\"draggable_holder\" style={{ height: \"100%\", width: \"100%\", zIndex: \"1\", backgroundColor: \"#00000000\"}}>\r\n                        \r\n                        {nodeLocation.map((node, index) => \r\n                            <Node \r\n                                indexValue = {index}\r\n                                key = {index}\r\n                                y = {node.y}\r\n                                x = {node.x}\r\n                                info = {nodeInfo.indivInfo[index]}\r\n                                onInteract = {() => {\r\n                                    if (put === -1) {\r\n                                        setnodeLocation(updateNodeLocation(nodeLocation, index, -1, -1))\r\n                                        setConnection(deleteConnection(nodeConnection, index))\r\n                                        setnodeInfo(newNodeInfo(nodeAmount - 1))\r\n                                        setAmount(nodeAmount - 1)\r\n                                    }\r\n\r\n                                    if (put === \"connect\") {\r\n                                        if (connectStart === -1) {\r\n                                            setConnectStart(index)\r\n                                        }\r\n                                        else {\r\n                                            setConnection(updateConnection(nodeConnection, connectStart, index))\r\n                                        }\r\n                                    }\r\n                                    if (put === \"start\" || put === \"end\") {\r\n                                        updateInfo(index, put)\r\n                                    }\r\n                                }}\r\n                                updateLoc = {(e, pos) => setnodeLocation(updateNodeLocation(nodeLocation, index, pos.y, pos.x))}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div id=\"pf_node_info\">\r\n                    <div id='pf_node_player'>\r\n                        <button id='pf_node_run' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setRun(!isRunning)}> Play\r\n                        </button>\r\n                        <button id='pf_node_step' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setnodeInfo(findType === \"A*\" ? Astar_node_onestep(nodeConnection, nodeInfo) : BFS_node_onestep(nodeConnection, nodeInfo))}> Step\r\n                        </button>\r\n                        <button id='pf_node_reset' style={{ backgroundColor: '#101010' }}\r\n                            onClick={() => {\r\n                                setRun(false)\r\n                                //setmaze([maze[0], newMazeState(height, width, maze[1].start, maze[1].end)])\r\n                            }}>\r\n                            Reset\r\n                        </button>\r\n                        <label htmlFor='pf_node_delay'>Delay</label>\r\n                        <input type='number' id='pf_node_delay' name='pf_node_delay'\r\n                            onChange={e => setdelay(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? parseInt(e.target.value) : 1)}\r\n                        />\r\n                    </div>\r\n                    {nodeConnection.map((node1, index1) => {\r\n                        return (\r\n                            <div>\r\n                                {node1.map((node2, index2) => { \r\n                                    return ( \r\n                                        <span> {nodeConnection[index1][index2]} </span> \r\n                                    ) \r\n                                })}\r\n                            </div>\r\n                        )})\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const PathfindNode = React.memo(PfNode);","// How node map work:\r\n/* \r\n    Have 2 arg: connection (which have the weight between 2 note), and info\r\n\r\n    when done, return a new infoState\r\n*/\r\n\r\nexport function BFS_node_onestep(connection, info) {\r\n    if (info.runState === \"done\") {\r\n        return info\r\n    }\r\n\r\n\r\n    // If the finding is done, and there's a route to the end\r\n    if (info.runState === \"done_with_end\") {\r\n        if (info.backtrack === -1) {\r\n            info.backtrack = info.P[info.end]\r\n        }\r\n        else {\r\n            info.backtrack = info.P[info.backtrack]\r\n        }\r\n\r\n        if (info.start === info.backtrack) {\r\n            info.runState = \"done\"\r\n            return info\r\n        }\r\n\r\n        info.H[info.backtrack] = true\r\n\r\n        return info\r\n    }\r\n\r\n    let copy = [...info] // Basically a copy of the original info board, because i don't even know\r\n\r\n    // If there are nothing in queue -> basically not initialized\r\n    if (copy.Q.length === 0) {\r\n        for (let i = 0; i < copy.amount; i++) {\r\n            if (copy[i] === 'start' && !copy.V[i]) {\r\n                copy.start = i\r\n                copy.Q.push({ id: i, w: 0 })\r\n                copy.W[i] = 0\r\n                copy.P[i] = i\r\n            }\r\n        }\r\n    }\r\n\r\n    // If there's still nothing in queue => oop no place to go :< (For node map this probably won't happen that much)\r\n    if (copy.Q.length === 0) {\r\n        copy.runState = \"done\"\r\n        return copy\r\n    }\r\n\r\n    copy.Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    // Node here represent the next running node\r\n    let node = copy.Q.shift()\r\n    while (copy.V[node.id]) {\r\n        if (info.Q.length === 0) {\r\n            copy.runState = \"done\"\r\n            return copy\r\n        }\r\n        node = copy.Q.shift()\r\n    }\r\n\r\n    copy.V[node.id] = true\r\n    copy.VCount++\r\n\r\n    if (copy.end === node.id) {\r\n        copy.runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    for (let i = 0, n = connection[node.id].length; i < n; i++) {\r\n        if (connection[node.id][i] !== 0) {\r\n            copy.W[i] = copy.W[node.id] + 1\r\n            copy.Q.push({ id: i, w: copy.W[i] })\r\n            copy.P[i] = node.id\r\n        }\r\n    }\r\n\r\n    copy.Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    return copy\r\n}\r\n\r\n\r\nexport function Astar_node_onestep(maze) {\r\n    return 0;\r\n    /*\r\n    if (maze[1].runState === \"done\") {\r\n        return maze\r\n    }\r\n\r\n    let copy = [...maze]\r\n\r\n    let w = info.dimension.w\r\n    let h = info.dimension.h\r\n\r\n    if (info.runState === \"done_with_end\") {\r\n        if (info.backtrack.x === -1) {\r\n            info.backtrack.x = info.P[info.end.y][info.end.x].x\r\n            info.backtrack.y = info.P[info.end.y][info.end.x].y\r\n        }\r\n        else {\r\n            info.backtrack = { x: info.P[info.backtrack.y][info.backtrack.x].x, y: info.P[info.backtrack.y][info.backtrack.x].y }\r\n        }\r\n\r\n        if (info.start.x === info.backtrack.x && info.start.y === info.backtrack.y) {\r\n            info.runState = \"done\"\r\n            return copy\r\n        }\r\n\r\n        info.H[info.backtrack.y][info.backtrack.x] = true\r\n\r\n        return copy\r\n    }\r\n\r\n    // If there are nothing in queue -> basically not initialized\r\n    if (info.Q.length === 0) {\r\n        for (let i = 0; i < h; i++) {\r\n            for (let j = 0; j < w; j++) {\r\n                if (copy[0][i][j] === 'start' && !info.V[i][j]) {\r\n                    info.start = { y: i, x: j }\r\n                    info.Q.push({ y: i, x: j, w: 0 })\r\n                    info.W[i][j] = 0\r\n                    info.P[i][j] = { y: i, x: j }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (info.Q.length === 0) {\r\n        info.runState = \"done\"\r\n        return copy\r\n    }\r\n\r\n    info.Q.sort((first, second) => {\r\n        return (Math.sqrt(Math.pow(first.x - info.end.x, 2) + Math.pow(first.y - info.end.y, 2))) * 2 + first.w -\r\n            (Math.sqrt(Math.pow(second.x - info.end.x, 2) + Math.pow(second.y - info.end.y, 2))) * 2 - second.w\r\n    })\r\n\r\n    let tile = info.Q.shift()\r\n    while (info.V[tile.y][tile.x]) {\r\n        if (info.Q.length === 0) {\r\n            info.runState = \"done\"\r\n            return copy\r\n        }\r\n        tile = info.Q.shift()\r\n    }\r\n\r\n    info.V[tile.y][tile.x] = true\r\n    info.VCount++\r\n\r\n    if (info.end.y === tile.y && info.end.x === tile.x) {\r\n        info.runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    let UpT = { x: tile.x, y: tile.y - 1 }\r\n    let DownT = { x: tile.x, y: tile.y + 1 }\r\n    let LeftT = { x: tile.x - 1, y: tile.y }\r\n    let RightT = { x: tile.x + 1, y: tile.y }\r\n\r\n    if (UpT.y >= 0 && !info.V[UpT.y][UpT.x] && copy[0][UpT.y][UpT.x] !== \"inf\") {\r\n        if (info.W[tile.y][tile.x] + 1 < info.W[UpT.y][UpT.x]) {\r\n            info.W[UpT.y][UpT.x] = info.W[tile.y][tile.x] + 1\r\n            info.Q.push({ y: UpT.y, x: UpT.x, w: info.W[UpT.y][UpT.x] })\r\n            info.P[UpT.y][UpT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (DownT.y < h && !info.V[DownT.y][DownT.x] && copy[0][DownT.y][DownT.x] !== \"inf\") {\r\n        if (info.W[tile.y][tile.x] + 1 < info.W[DownT.y][DownT.x]) {\r\n            info.W[DownT.y][DownT.x] = info.W[tile.y][tile.x] + 1\r\n            info.Q.push({ y: DownT.y, x: DownT.x, w: info.W[DownT.y][DownT.x] })\r\n            info.P[DownT.y][DownT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (LeftT.x >= 0 && !info.V[LeftT.y][LeftT.x] && copy[0][LeftT.y][LeftT.x] !== \"inf\") {\r\n        if (info.W[tile.y][tile.x] + 1 < info.W[LeftT.y][LeftT.x]) {\r\n            info.W[LeftT.y][LeftT.x] = info.W[tile.y][tile.x] + 1\r\n            info.Q.push({ y: LeftT.y, x: LeftT.x, w: info.W[LeftT.y][LeftT.x] })\r\n            info.P[LeftT.y][LeftT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (RightT.x < w && !info.V[RightT.y][RightT.x] && copy[0][RightT.y][RightT.x] !== \"inf\") {\r\n        if (info.W[tile.y][tile.x] + 1 < info.W[RightT.y][RightT.x]) {\r\n            info.W[RightT.y][RightT.x] = info.W[tile.y][tile.x] + 1\r\n            info.Q.push({ y: RightT.y, x: RightT.x, w: info.W[RightT.y][RightT.x] })\r\n            info.P[RightT.y][RightT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n\r\n    info.Q.sort((first, second) => {\r\n        return (Math.sqrt(Math.pow(first.x - info.end.x, 2) + Math.pow(first.y - info.end.y, 2))) * 2 + first.w -\r\n            (Math.sqrt(Math.pow(second.x - info.end.x, 2) + Math.pow(second.y - info.end.y, 2))) * 2 - second.w\r\n    })\r\n\r\n    return copy\r\n    */\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport CSelect from '../component/CSelect';\r\n\r\nimport  { PathfindMaze } from '../component/pathfind/pf_maze';\r\nimport { PathfindNode } from '../component/pathfind/pf_node';\r\n\r\n//import {Helmet} from \"react-helmet\";\r\n\r\nimport './ss/path_find.scss';\r\n\r\nfunction Pathfind(props) {\r\n    if (props.type === 'Maze') return (<PathfindMaze find={props.find} />)\r\n    if (props.type === 'Nodes') return (<PathfindNode find={props.find} />)\r\n    return (\r\n        <div id='pf_screen'>\r\n            <div id='pf_map'>\r\n                uwu\r\n            </div>\r\n            <div id='pf_info'>\r\n                uwu\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Pathfind_page() {\r\n    const [mapType, setmapType] = useState(\"Nodes\")\r\n\r\n    return (\r\n        <div id=\"pathfind_page\">\r\n            <h1> Yoooooo this is the path find page      <a href=\"./#/\"> Go back </a> </h1>\r\n\r\n            <div id=\"pathfind_option\">\r\n                <CSelect className='pf_option_map' option={['Maze', 'Nodes']} current={mapType} handleChange={setmapType} />\r\n            </div>\r\n\r\n            <Pathfind type={mapType} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pathfind_page;","import './App.scss';\nimport { Route, Switch, Link, HashRouter as Router} from 'react-router-dom';\n\nimport Lobby from \"./page/lobby.js\"\nimport Pathfind_page from \"./page/path_find.js\"\n\nfunction App() {\n  return (\n      <Router>\n      <div id=\"app\">\n        <Route exact path=\"/path-find\" component={Pathfind_page} />\n        <Route exact path=\"/\" component={Lobby} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}