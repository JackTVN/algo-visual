{"version":3,"sources":["page/lobby.js","component/CSelect.js","component/CHook.js","component/pathfind/pf_maze_solver.js","component/pathfind/pf_maze_creator.js","component/pathfind/pf_maze.js","component/pathfind/pf_node_solver.js","component/pathfind/pf_node.js","page/path_find.js","App.js","reportWebVitals.js","index.js"],"names":["Lobby","id","href","CSelect","className","option","current","handleChange","value","onChange","e","target","map","useInterval","callback","delay","savedCallback","useRef","useEffect","setInterval","clearInterval","BFS_maze_onestep","maze","runState","copy","w","dimension","h","backtrack","x","P","end","y","start","H","Q","length","i","j","V","push","W","sort","first","second","tile","shift","VCount","UpT","DownT","LeftT","RightT","Astar_maze_onestep","Math","sqrt","pow","console","log","mainPlane","randomNumber","min","max","floor","random","IIDArrayValued","arr","Array","AddLineRecur","startH","startW","dir","splitLine","entrance","Recursive_Division_Maze","CheckNeighborTiles","p","possibleTile","Prim_Random_Maze","path","visited","tileH","tileW","pos","next","pop","updateMaze","put","startP","endP","newMazeState","height","width","UpdateInteract","mazePrev","select","selected","Node","props","draggable","state","highlight","onMouseDown","onDown","onMouseEnter","onDrag","TileInfo","c","d","toFixed","v","prev","PfMaze","useState","setheight","setwidth","setmaze","mazeInteract","setInteract","setput","mouseDown","setmouseDown","findType","setFind","isRunning","setRun","setdelay","runResult","onMouseUp","htmlFor","type","name","isNaN","parseInt","onClick","style","backgroundColor","color","gridTemplateColumns","gridTemplateRows","line","indexy","indexx","weight","index","PathfindMaze","React","memo","Dijkstra_node_onestep","connection","info","amount","indivInfo","node","n","splice","nodeRef","fillColor","indexOf","axis","bounds","handle","position","updateLoc","grid","ref","onMouseDownCapture","onInteract","onTouchStartCapture","dominantBaseline","fill","indexValue","updateNodeLocation","original","idx","newMap","newNodeInfo","newIndiv","nInfo","filter","element","PfNode","nodeAmount","setAmount","nodeLocation","setnodeLocation","nodeConnection","setConnection","nodeInfo","setnodeInfo","setPut","connectStart","setConnectStart","pastedState","setpastedState","rect","getBoundingClientRect","pageY","top","pageX","left","addConnection","node1","index1","node2","index2","x1","y1","x2","y2","stroke","strokeWidth","idx1","idx2","newValue","updateConnectionWeight","zIndex","deleteConnection","updateConnection","updateInfo","defaultValue","result","objFull","JSON","stringify","navigator","clipboard","writeText","alert","copyState","newState","parse","PathfindNode","Pathfind","find","Pathfind_page","mapType","setmapType","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a11b5b1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//import {Helmet} from \"react-helmet\";\r\n\r\nimport './ss/lobby.scss';\r\n\r\nfunction Lobby() {\r\n\treturn (\r\n\t<div id=\"lobby\">\r\n\t\t<h1> Yoooooo </h1>\r\n\r\n        <a href=\"./#/path-find\"> Pathfind </a> \r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Lobby;","import React from 'react';\r\n\r\n//Default style for select\r\nimport './CSelect.scss';\r\n\r\nexport default function CSelect({className, option, current, handleChange}) {\r\n    return(\r\n    <select className={className} value={current} onChange={e => handleChange(e.target.value)} >    \r\n        { option.map(value =>\r\n            <option value={value} key={value}> {value} </option>\r\n        )}\r\n    </select>\r\n    )\r\n}","import { useState, useEffect, useRef } from 'react';\r\n\r\n// https://usehooks-ts.com/react-hook/use-interval\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport function useMousePosition() {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const setFromEvent = (e) => setPosition({ x: e.clientX, y: e.clientY });\r\n    window.addEventListener(\"mousemove\", setFromEvent);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", setFromEvent);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n};","export function BFS_maze_onestep(maze) {\r\n    if (maze[1].runState === \"done\") {\r\n        return maze\r\n    }\r\n\r\n    let copy = [...maze]\r\n\r\n    let w = copy[1].dimension.w\r\n    let h = copy[1].dimension.h\r\n\r\n    // If the finding is done, and there's a route to the end\r\n    if (copy[1].runState === \"done_with_end\") {\r\n        if (copy[1].backtrack.x === -1) {\r\n            copy[1].backtrack.x = copy[1].P[copy[1].end.y][copy[1].end.x].x\r\n            copy[1].backtrack.y = copy[1].P[copy[1].end.y][copy[1].end.x].y\r\n        }\r\n        else {\r\n            copy[1].backtrack = { x: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].x, y: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].y }\r\n        }\r\n\r\n        if (copy[1].start.x === copy[1].backtrack.x && copy[1].start.y === copy[1].backtrack.y) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n\r\n        copy[1].H[copy[1].backtrack.y][copy[1].backtrack.x] = true\r\n\r\n        return copy\r\n    }\r\n\r\n    // If there are nothing in queue -> basically not initialized, get start point\r\n    if (copy[1].Q.length === 0) {\r\n        for (let i = 0; i < h; i++) {\r\n            for (let j = 0; j < w; j++) {\r\n                if (copy[0][i][j] === 'start' && !copy[1].V[i][j]) {\r\n                    copy[1].start = { y: i, x: j }\r\n                    copy[1].Q.push({ y: i, x: j, w: 0 })\r\n                    copy[1].W[i][j] = 0\r\n                    copy[1].P[i][j] = { y: i, x: j }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (copy[1].Q.length === 0) {\r\n        copy[1].runState = \"done\"\r\n        return copy\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    let tile = copy[1].Q.shift()\r\n    while (copy[1].V[tile.y][tile.x]) {\r\n        if (copy[1].Q.length === 0) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n        tile = copy[1].Q.shift()\r\n    }\r\n\r\n    copy[1].V[tile.y][tile.x] = true\r\n    copy[1].VCount++\r\n\r\n    if (copy[1].end.y === tile.y && copy[1].end.x === tile.x) {\r\n        copy[1].runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    let UpT = { x: tile.x, y: tile.y - 1 }\r\n    let DownT = { x: tile.x, y: tile.y + 1 }\r\n    let LeftT = { x: tile.x - 1, y: tile.y }\r\n    let RightT = { x: tile.x + 1, y: tile.y }\r\n\r\n    if (UpT.y >= 0 && !copy[1].V[UpT.y][UpT.x] && copy[0][UpT.y][UpT.x] !== \"inf\") {\r\n        copy[1].W[UpT.y][UpT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: UpT.y, x: UpT.x, w: copy[1].W[UpT.y][UpT.x] })\r\n        copy[1].P[UpT.y][UpT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n    if (DownT.y < h && !copy[1].V[DownT.y][DownT.x] && copy[0][DownT.y][DownT.x] !== \"inf\") {\r\n        copy[1].W[DownT.y][DownT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: DownT.y, x: DownT.x, w: copy[1].W[DownT.y][DownT.x] })\r\n        copy[1].P[DownT.y][DownT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n    if (LeftT.x >= 0 && !copy[1].V[LeftT.y][LeftT.x] && copy[0][LeftT.y][LeftT.x] !== \"inf\") {\r\n        copy[1].W[LeftT.y][LeftT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: LeftT.y, x: LeftT.x, w: copy[1].W[LeftT.y][LeftT.x] })\r\n        copy[1].P[LeftT.y][LeftT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n    if (RightT.x < w && !copy[1].V[RightT.y][RightT.x] && copy[0][RightT.y][RightT.x] !== \"inf\") {\r\n        copy[1].W[RightT.y][RightT.x] = copy[1].W[tile.y][tile.x] + 1\r\n        copy[1].Q.push({ y: RightT.y, x: RightT.x, w: copy[1].W[RightT.y][RightT.x] })\r\n        copy[1].P[RightT.y][RightT.x] = { y: tile.y, x: tile.x }\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    return copy\r\n}\r\n\r\nexport function Astar_maze_onestep(maze) {\r\n    if (maze[1].runState === \"done\") {\r\n        return maze\r\n    }\r\n\r\n    let copy = [...maze]\r\n\r\n    let w = copy[1].dimension.w\r\n    let h = copy[1].dimension.h\r\n\r\n    if (copy[1].runState === \"done_with_end\") {\r\n        if (copy[1].backtrack.x === -1) {\r\n            copy[1].backtrack.x = copy[1].P[copy[1].end.y][copy[1].end.x].x\r\n            copy[1].backtrack.y = copy[1].P[copy[1].end.y][copy[1].end.x].y\r\n        }\r\n        else {\r\n            copy[1].backtrack = { x: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].x, y: copy[1].P[copy[1].backtrack.y][copy[1].backtrack.x].y }\r\n        }\r\n\r\n        if (copy[1].start.x === copy[1].backtrack.x && copy[1].start.y === copy[1].backtrack.y) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n\r\n        copy[1].H[copy[1].backtrack.y][copy[1].backtrack.x] = true\r\n\r\n        return copy\r\n    }\r\n\r\n    // If there are nothing in queue -> basically not initialized\r\n    if (copy[1].Q.length === 0) {\r\n        for (let i = 0; i < h; i++) {\r\n            for (let j = 0; j < w; j++) {\r\n                if (copy[0][i][j] === 'start' && !copy[1].V[i][j]) {\r\n                    copy[1].start = { y: i, x: j }\r\n                    copy[1].Q.push({ y: i, x: j, w: 0 })\r\n                    copy[1].W[i][j] = 0\r\n                    copy[1].P[i][j] = { y: i, x: j }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (copy[1].Q.length === 0) {\r\n        copy[1].runState = \"done\"\r\n        return copy\r\n    }\r\n\r\n    copy[1].Q.sort((first, second) => {\r\n        return (Math.sqrt(Math.pow(first.x - copy[1].end.x, 2) + Math.pow(first.y - copy[1].end.y, 2))) * 2 + first.w -\r\n            (Math.sqrt(Math.pow(second.x - copy[1].end.x, 2) + Math.pow(second.y - copy[1].end.y, 2))) * 2 - second.w\r\n    })\r\n\r\n    console.log(copy[1].Q);\r\n\r\n    let tile = copy[1].Q.shift()\r\n    while (copy[1].V[tile.y][tile.x]) {\r\n        if (copy[1].Q.length === 0) {\r\n            copy[1].runState = \"done\"\r\n            return copy\r\n        }\r\n        tile = copy[1].Q.shift()\r\n    }\r\n\r\n    copy[1].V[tile.y][tile.x] = true\r\n    copy[1].VCount++\r\n\r\n    if (copy[1].end.y === tile.y && copy[1].end.x === tile.x) {\r\n        copy[1].runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    let UpT = { x: tile.x, y: tile.y - 1 }\r\n    let DownT = { x: tile.x, y: tile.y + 1 }\r\n    let LeftT = { x: tile.x - 1, y: tile.y }\r\n    let RightT = { x: tile.x + 1, y: tile.y }\r\n\r\n    if (UpT.y >= 0 && !copy[1].V[UpT.y][UpT.x] && copy[0][UpT.y][UpT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[UpT.y][UpT.x]) {\r\n            copy[1].W[UpT.y][UpT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: UpT.y, x: UpT.x, w: copy[1].W[UpT.y][UpT.x] })\r\n            copy[1].P[UpT.y][UpT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (DownT.y < h && !copy[1].V[DownT.y][DownT.x] && copy[0][DownT.y][DownT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[DownT.y][DownT.x]) {\r\n            copy[1].W[DownT.y][DownT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: DownT.y, x: DownT.x, w: copy[1].W[DownT.y][DownT.x] })\r\n            copy[1].P[DownT.y][DownT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (LeftT.x >= 0 && !copy[1].V[LeftT.y][LeftT.x] && copy[0][LeftT.y][LeftT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[LeftT.y][LeftT.x]) {\r\n            copy[1].W[LeftT.y][LeftT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: LeftT.y, x: LeftT.x, w: copy[1].W[LeftT.y][LeftT.x] })\r\n            copy[1].P[LeftT.y][LeftT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n    if (RightT.x < w && !copy[1].V[RightT.y][RightT.x] && copy[0][RightT.y][RightT.x] !== \"inf\") {\r\n        if (copy[1].W[tile.y][tile.x] + 1 < copy[1].W[RightT.y][RightT.x]) {\r\n            copy[1].W[RightT.y][RightT.x] = copy[1].W[tile.y][tile.x] + 1\r\n            copy[1].Q.push({ y: RightT.y, x: RightT.x, w: copy[1].W[RightT.y][RightT.x] })\r\n            copy[1].P[RightT.y][RightT.x] = { y: tile.y, x: tile.x }\r\n        }\r\n    }\r\n\r\n    return copy\r\n}","/*\r\n    How do these thing work?\r\n\r\n    1. Create the entire maze, in list[list] form\r\n    2. Everytime a tile is modified in the maze, put it in a list of change\r\n    \r\n    When the maze app want to create a maze, the function will try to make a maze as fast as possible, then give back the list of tile modify to the app\r\n    The app then just has to replicate the change! easy\r\n*/\r\n\r\nvar mainPlane = null;\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction IIDArrayValued(h, w, value) {\r\n    let arr = Array(h);\r\n\r\n    for (let i = 0; i < h; i++){\r\n        arr[i] = Array(w);\r\n        for (let j = 0; j < w; j++){\r\n            arr[i][j] = value;\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nfunction AddLineRecur(startH, H, startW, W, dir) {\r\n    if (dir === \"vertical\"){\r\n        if (W - startW < 2) {\r\n            return;\r\n        }\r\n\r\n        let splitLine = Math.floor(randomNumber(startW + 1, W - 1) / 2) * 2 + 1\r\n        \r\n        for (let i = startH; i <= H; i++){\r\n            mainPlane[i][splitLine] = \"inf\"\r\n        }\r\n\r\n        let entrance = Math.floor(randomNumber(startH, H - 1) / 2) * 2\r\n\r\n        mainPlane[entrance][splitLine] = 1\r\n\r\n        AddLineRecur(startH, H, startW, splitLine - 1, \"horizontal\")\r\n        AddLineRecur(startH, H, splitLine + 1, W, \"horizontal\")\r\n    }\r\n    else {\r\n        if (H - startH < 2) {\r\n            return;\r\n        }\r\n\r\n        let splitLine = Math.floor(randomNumber(startH + 1, H - 1) / 2) * 2 + 1\r\n\r\n        for (let i = startW; i <= W; i++){\r\n            mainPlane[splitLine][i] = \"inf\"\r\n        }\r\n\r\n        let entrance = Math.floor(randomNumber(startW, W - 1) / 2) * 2\r\n\r\n        mainPlane[splitLine][entrance] = 1\r\n\r\n        AddLineRecur(startH, splitLine - 1, startW, W, \"vertical\")\r\n        AddLineRecur(splitLine + 1, H, startW, W, \"vertical\")\r\n    }\r\n}\r\n\r\nexport function Recursive_Division_Maze(h, w) {\r\n    mainPlane = null\r\n    mainPlane = IIDArrayValued(h, w, 1)\r\n\r\n    // Fill some edge to get an odd length and width\r\n    if (h % 2 === 0){\r\n        h--\r\n        for (let i = 0; i < w; i++){\r\n            mainPlane[h][i] = \"inf\"\r\n        }\r\n    }\r\n\r\n    if (w % 2 === 0){\r\n        w--\r\n        for (let i = 0; i < h; i++){\r\n            mainPlane[i][w] = \"inf\"\r\n        }\r\n    }\r\n\r\n    AddLineRecur(0, h - 1, 0, w - 1, \"vertical\")\r\n\r\n    return mainPlane;\r\n}\r\n\r\nfunction CheckNeighborTiles(p, h, w){\r\n    let possibleTile = []\r\n\r\n    let UpT    = {x: p.x, y: p.y - 1}\r\n    let DownT  = {x: p.x, y: p.y + 1}\r\n    let LeftT  = {x: p.x - 1, y: p.y}\r\n    let RightT = {x: p.x + 1, y: p.y}\r\n\r\n    if ( UpT.y >= 0 && mainPlane[UpT.y * 2][ UpT.x * 2] === \"inf\")\r\n        possibleTile.push(UpT)\r\n    if ( DownT.y <= h && mainPlane[DownT.y * 2][ DownT.x * 2] === \"inf\")\r\n        possibleTile.push(DownT)\r\n    if ( LeftT.x >= 0 && mainPlane[LeftT.y * 2][ LeftT.x * 2] === \"inf\")\r\n        possibleTile.push(LeftT)\r\n    if ( RightT.x <= w && mainPlane[RightT.y * 2][ RightT.x * 2] === \"inf\")\r\n        possibleTile.push(RightT)\r\n\r\n    if (possibleTile.length === 0)\r\n        return p\r\n    else\r\n        return possibleTile[Math.floor(Math.random()*possibleTile.length)]\r\n\r\n}\r\n\r\nexport function Prim_Random_Maze(h, w) {\r\n    mainPlane = null\r\n    mainPlane = IIDArrayValued(h, w, \"inf\")\r\n\r\n    let path = []\r\n    let visited = 1\r\n\r\n    let tileH = Math.floor((h - 1) / 2)\r\n    let tileW = Math.floor((w - 1) / 2)\r\n\r\n    let pos = {x: randomNumber(0, tileW), y: randomNumber(0, tileH)}\r\n\r\n    mainPlane[pos.y * 2][pos.x * 2] = 1\r\n\r\n    path.push(pos)\r\n\r\n    while (visited < (tileH + 1) * (tileW + 1)) {\r\n        let next = CheckNeighborTiles(pos, tileH, tileW)\r\n\r\n        if (next === pos) pos = path.pop()\r\n        else {\r\n            mainPlane[next.y * 2][next.x * 2] = 1\r\n            mainPlane[next.y + pos.y][next.x + pos.x] = 1\r\n            path.push(next)\r\n            pos = next\r\n            visited++\r\n        }\r\n    }\r\n\r\n    return mainPlane;\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { useInterval } from '../CHook.js';\r\nimport { BFS_maze_onestep, Astar_maze_onestep } from './pf_maze_solver.js';\r\nimport { Prim_Random_Maze, Recursive_Division_Maze } from './pf_maze_creator.js';\r\n\r\nimport CSelect from '../CSelect.js';\r\n\r\n//import { Icons } from '../../resources/icon.js'\r\n\r\nimport './pf_maze.scss';\r\n\r\nfunction IIDArrayValued(h, w, value) {\r\n    let arr = Array(h);\r\n\r\n    for (let i = 0; i < h; i++) {\r\n        arr[i] = Array(w);\r\n        for (let j = 0; j < w; j++) {\r\n            arr[i][j] = value;\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nfunction updateMaze(maze, put, y, x) {\r\n    if (put === -1) {\r\n        return maze;\r\n    }\r\n\r\n    let copy = [...maze];\r\n\r\n    let startP = copy[1].start;\r\n    let endP = copy[1].end;\r\n\r\n    if (put === 'start') {\r\n        copy[1].start = { y: y, x: x }\r\n\r\n        if (startP.x !== -1) {\r\n            copy[0][startP.y][startP.x] = 1;\r\n        }\r\n    }\r\n    else if (put === 'end') {\r\n        copy[1].end = { y: y, x: x }\r\n\r\n        if (endP.x !== -1) {\r\n            copy[0][endP.y][endP.x] = 1;\r\n        }\r\n    }\r\n    else {\r\n        if (startP.x === x && startP.y === y) copy[1].start = { y: -1, x: -1 }\r\n        if (endP.x === x && endP.y === y) copy[1].end = { y: -1, x: -1 }\r\n    }\r\n    copy[0][y][x] = put;\r\n\r\n    return copy;\r\n}\r\n\r\nfunction newMazeState(height, width, start = { y: -1, x: -1 }, end = { y: -1, x: -1 },) {\r\n    /*\r\n        maze object (at the start of the main func) has the 1st value as the entire maze in a 2d array, and the 2nd value as all the important thing\r\n        in the maze (Starting point, Ending point, Priority Queue)\r\n    */\r\n\r\n    return {\r\n        start: start, // Start\r\n        end: end, // End\r\n        backtrack: { y: -1, x: -1 }, // Backtrack to work with highlighting end point\r\n        dimension: { h: height, w: width }, // Width and Height\r\n        W: IIDArrayValued(height, width, 1000000), // Weight\r\n        V: IIDArrayValued(height, width, false), // Visited\r\n        VCount: 0,\r\n        Q: [], // Queue\r\n        P: IIDArrayValued(height, width, null), // Tile of previous movement\r\n        H: IIDArrayValued(height, width, false), // Highlight\r\n        runState: \"run\",\r\n    }\r\n    /* TLDR: maze[1][0] would be the start, [1][1] would be the end, and [1][3] Priority Queue */\r\n}\r\n\r\nfunction UpdateInteract(mazePrev, select) {\r\n    if (mazePrev.selected.y === select.y && mazePrev.selected.x === select.x) {\r\n        return {\r\n            selected: {y: -1, x: -1}\r\n        }\r\n    }\r\n    return {\r\n        selected: { y: select.y, x: select.x }, // Selected Tile\r\n    }\r\n}\r\n\r\nfunction Node(props) {\r\n    return (\r\n        <div draggable='false' \r\n            className={\r\n                'maze_node mstate' + props.state + (props.visited ? \"visited\" : \"\") + (props.highlight ? \"highlight\" : \"\")\r\n                + (props.selected ? \" selectedTile\" : \"\")\r\n            }\r\n            onMouseDown={props.onDown} onMouseEnter={props.onDrag}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TileInfo(props) {\r\n    return (\r\n        <div id=\"tile_info\">\r\n            <div> Position: {props.pos.y + 1} x {props.pos.x + 1} </div>\r\n            <div> Cost to: {props.c}</div>\r\n            <div> Weight: {props.w === 1000000 ? \"Infinite\" : props.w} </div>\r\n            {props.d === null ? <div /> : <div> Distance to endpoint: {props.d.toFixed(2)} </div>}\r\n\r\n            <div> Visited: {props.v === true ? \"True\" : \"False\"} </div>\r\n            {props.prev === null ? <div> Previous Tile: None </div> : <div> Previous Tile: {props.prev.y + 1} x {props.prev.x + 1} </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PfMaze(props) {\r\n    const [height, setheight] = useState(10)\r\n    const [width, setwidth] = useState(20)\r\n    const [maze, setmaze] = useState([IIDArrayValued(height, width, 1), newMazeState(height, width)])\r\n    const [mazeInteract, setInteract] = useState({selected:{y: -1, x: -1}})\r\n    const [put, setput] = useState(1)\r\n    const [mouseDown, setmouseDown] = useState(false)\r\n    const [findType, setFind] = useState(\"BFS\")\r\n\r\n    // Player states\r\n    const [isRunning, setRun] = useState(false)\r\n    const [delay, setdelay] = useState(1)\r\n\r\n    useInterval(() => {\r\n        let runResult = findType === \"A*\" ? Astar_maze_onestep(maze) : BFS_maze_onestep(maze)\r\n        setmaze(runResult)\r\n        if (runResult[1].runState === \"done\") setRun(false)\r\n\r\n    }, isRunning ? delay : null);\r\n\r\n    useEffect(() => {\r\n        setInteract(UpdateInteract(mazeInteract, {y: -1, x: -1}))\r\n        setmaze([IIDArrayValued(height, width, 1), newMazeState(height, width)])\r\n    }, [height])\r\n\r\n    useEffect(() => {\r\n        setInteract(UpdateInteract(mazeInteract, {y: -1, x: -1}))\r\n        setmaze([IIDArrayValued(height, width, 1), newMazeState(height, width)])\r\n    }, [width])\r\n\r\n    return (\r\n        <div id=\"pf_workspace\" onMouseDown={() => setmouseDown(true)} onMouseUp={() => setmouseDown(false)}>\r\n            <div id='pf_map_info'>\r\n                <label htmlFor='pf_option_h'>Height</label>\r\n                <input type='number' id='pf_option_h' name='pf_option_h'\r\n                    onChange={e => setheight(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? (parseInt(e.target.value) < 30 ? parseInt(e.target.value) : 29) : 1)}\r\n                />\r\n                <label htmlFor='pf_option_w'>Width</label>\r\n                <input type='number' id='pf_option_w' name='pf_option_w'\r\n                    onChange={e => setwidth(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? (parseInt(e.target.value) < 60 ? parseInt(e.target.value) : 59) : 1)}\r\n                />\r\n                <CSelect className='pf_option_search' option={['BFS', 'A*', 'Placeholder 2 ', 'Placeholder 3  ']} current={findType} handleChange={setFind} />\r\n                <CSelect className='pf_option_create' option={['', 'Recursive Division', 'Prim (Random Run)']} current=''\r\n                    handleChange={(value) => {\r\n                        if (value === \"Recursive Division\")\r\n                            setmaze([Recursive_Division_Maze(height, width), newMazeState(height, width)])\r\n                        if (value === 'Prim (Random Run)')\r\n                            setmaze([Prim_Random_Maze(height, width), newMazeState(height, width)])\r\n                    }}\r\n                />\r\n            </div>\r\n            <div id='pf_item'>\r\n                <button id='map_clear' onClick={() => setmaze([IIDArrayValued(height, width, 1), newMazeState(height, width)])}>\r\n                    Clear\r\n                    <span className='tooltip'> Clear all tiles </span>\r\n                </button>\r\n                <button id='map_start_point' onClick={() => put === 'start' ? setput(-1) : setput('start')}\r\n                    style={{ backgroundColor: put === 'start' ? '#5e5e5e' : '#101010', color: put === 'start' ? '#101010' : '#fafafa' }}>\r\n                    Start\r\n                    <span className='tooltip'> Next Tile click will determine the start point </span>\r\n                </button>\r\n                <button id='map_end_point' onClick={() => put === 'end' ? setput(-1) : setput('end')}\r\n                    style={{ backgroundColor: put === 'end' ? '#5e5e5e' : '#101010', color: put === 'end' ? '#101010' : '#fafafa' }}>\r\n                    End\r\n                    <span className='tooltip'> Next Tile click will determine the end point </span>\r\n                </button>\r\n                <button id='map_draw' onClick={() => put === \"inf\" ? setput(-1) : setput(\"inf\")}\r\n                    style={{ backgroundColor: put === \"inf\" ? '#5e5e5e' : '#101010', color: put === \"inf\" ? '#101010' : '#fafafa' }}>\r\n                    Draw\r\n                    <span className='tooltip'> Set tile to wall with weight infinite </span>\r\n                </button>\r\n                <button id='map_delete' onClick={() => put === 1 ? setput(-1) : setput(1)}\r\n                    style={{ backgroundColor: put === 1 ? '#5e5e5e' : '#101010', color: put === 1 ? '#101010' : '#fafafa' }}>\r\n                    Delete\r\n                    <span className='tooltip'> Set tile to nothing with weight 0 </span>\r\n                </button>\r\n                <button id='map_select' onClick={() => put === setput('select')}\r\n                    style={{ backgroundColor: put === 'select' ? '#5e5e5e' : '#101010', color: put === 'select' ? '#101010' : '#fafafa' }}>\r\n                    Select\r\n                    <span className='tooltip'> Select a tile to view its info </span>\r\n                </button>\r\n            </div>\r\n            <div id='pf_screen'>\r\n                <div id='pf_map' style={{ gridTemplateColumns: \"repeat(\" + width + \", 1fr)\", gridTemplateRows: \"repeat(\" + height + \", 1fr)\" }}>\r\n                    {\r\n                        /* \r\n                            Maze is an array with an array in it (2D Array), first map get one line of the array and pass it with its index \r\n                            The line is then map again to individual value, pass with the index of the index of the value (indexx)\r\n                            indexy*height + indexx make sure every key is unique so the app don't cry in pain\r\n                        */\r\n                        maze[0].map((line, indexy) => line.map((tile, indexx) =>\r\n                            <Node state={tile} key={indexy * width + indexx}\r\n                                visited={maze[1].V[indexy][indexx]}\r\n                                selected={indexy === mazeInteract.selected.y && indexx === mazeInteract.selected.x}\r\n                                highlight={maze[1].H[indexy][indexx]}\r\n                                weight={maze[1].W[indexy][indexx]}\r\n                                onDown={() => put === \"select\" ? setInteract(UpdateInteract(mazeInteract, {y: indexy, x: indexx})) : setmaze(updateMaze(maze, put, indexy, indexx))}\r\n                                onDrag={() => put === \"select\" && mouseDown ? setInteract(UpdateInteract(mazeInteract, {y: indexy, x: indexx})) : setmaze(updateMaze(maze, mouseDown ? put : -1, indexy, indexx))}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div id='pf_info'>\r\n                    <div id='pf_maze_player'>\r\n                        <button id='pf_player_run' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setRun(!isRunning)}> Play\r\n                        </button>\r\n                        <button id='pf_player_step' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setmaze(findType === \"A*\" ? Astar_maze_onestep(maze) : BFS_maze_onestep(maze))}> Step\r\n                        </button>\r\n                        <button id='pf_player_reset' style={{ backgroundColor: '#101010' }}\r\n                            onClick={() => {\r\n                                setRun(false)\r\n                                setmaze([maze[0], newMazeState(height, width, maze[1].start, maze[1].end)])\r\n                            }}>\r\n                            Reset\r\n                        </button>\r\n                        <label htmlFor='pf_player_delay'>Delay</label>\r\n                        <input type='number' id='pf_player_delay' name='pf_player_delay'\r\n                            onChange={e => setdelay(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? parseInt(e.target.value) : 1)}\r\n                        />\r\n                    </div>\r\n                    <div id='pf_maze_log'>\r\n                        <div id='pf_maze_visit_count'> Tile visited: {maze[1].VCount} </div>\r\n                        <div id='pf_tile_info'>\r\n                            {\r\n                                mazeInteract.selected.x === -1 ? <div id=\"tile_info\" /> :\r\n                                    <TileInfo\r\n                                        pos={mazeInteract.selected}\r\n                                        c={maze[0][mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                        w={maze[1].W[mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                        d={\r\n                                            findType !== \"A*\" ? null :\r\n                                                maze[1].end.x !== -1 ?\r\n                                                    Math.sqrt(Math.pow(mazeInteract.selected.x - maze[1].end.x, 2) + Math.pow(mazeInteract.selected.y - maze[1].end.y, 2)) :\r\n                                                    null\r\n                                        }\r\n                                        v={maze[1].V[mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                        prev={maze[1].P[mazeInteract.selected.y][mazeInteract.selected.x]}\r\n                                    />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <ul id='pf_maze_queue'>\r\n                        {\r\n                            maze[1].Q.length === 0 ? <div id=\"empty_queue\" /> :\r\n                                maze[1].Q.map((path, index) => {\r\n                                    return (\r\n                                        <li id=\"path_queue\" key={index} onClick={() => setInteract(UpdateInteract(mazeInteract, {y: path.y, x: path.x}))}>\r\n                                            {index}. Position: {path.y} x {path.x}, Weight {findType !== \"A*\" ? \"\" : \"+ Distance * 2\"}: {\r\n                                                    (path.w + 2 * (findType !== \"A*\" ? 0 : \r\n                                                    Math.sqrt(Math.pow(path.x - maze[1].end.x, 2) + Math.pow(path.y - maze[1].end.y, 2))\r\n                                                    )).toFixed(2)\r\n                                                }\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const PathfindMaze = React.memo(PfMaze);","// How node map work:\r\n\r\nexport function Dijkstra_node_onestep(connection, info, amount) {\r\n    if (info.start === -1 || info.end === -1) {\r\n        console.log(\"missing start/end\");\r\n        return info\r\n    }\r\n\r\n    if (info.runState === \"done\") {\r\n        return info\r\n    }\r\n\r\n    let copy = {...info} // Basically a copy of the original info board, because i don't even know\r\n\r\n    // If the finding is done, and there's a route to the end\r\n    if (copy.runState === \"done_with_end\") {\r\n        copy.H[copy.end] = true\r\n        if (copy.backtrack === -1) {\r\n            copy.backtrack = copy.P[copy.end]\r\n        }\r\n        else {\r\n            copy.backtrack = copy.P[copy.backtrack]\r\n        }\r\n\r\n        if (copy.start === copy.backtrack) {\r\n            copy.H[copy.backtrack] = true\r\n            copy.runState = \"done\"\r\n            return copy\r\n        }\r\n\r\n        copy.H[copy.backtrack] = true\r\n        copy.indivInfo[copy.backtrack].push(\"highlight\")\r\n\r\n        return copy\r\n    }\r\n\r\n    // If there are nothing in queue -> basically not initialized\r\n    if (copy.Q.length === 0) {\r\n        if (!copy.V[copy.start]) {\r\n            copy.Q.push({ id: copy.start, w: 0 })\r\n            copy.W[copy.start] = 0\r\n            copy.P[copy.start] = copy.start\r\n        }\r\n\r\n        // If there's still nothing in queue => oop no place to go :< (For node map this probably won't happen that much)\r\n        else {\r\n            copy.runState = \"done\"\r\n            return copy\r\n        }\r\n    }\r\n\r\n    //copy.Q.sort((first, second) => { return first.w > second.w })\r\n\r\n    // Node here represent the next running node\r\n    let node = copy.Q.shift()\r\n    while (copy.V[node.id]) {\r\n        if (info.Q.length === 0) {\r\n            copy.runState = \"done\"\r\n            return copy\r\n        }\r\n        node = copy.Q.shift()\r\n    }\r\n\r\n    // Add the \"visited\" to the choosen node\r\n    copy.P[node.id] = node.p\r\n    copy.indivInfo[node.id].push(\"visited\")\r\n\r\n    // Change the choosen node visit to true\r\n    copy.V[node.id] = true\r\n    copy.VCount++\r\n\r\n    if (copy.end === node.id) {\r\n        copy.runState = \"done_with_end\"\r\n        return copy\r\n    }\r\n\r\n    // Due to array sorting being a huge ass, decided to just make a scuffed priority queue instead\r\n    for (let i = 0, n = connection[node.id].length; i < n; i++) {\r\n        if (!copy.V[i] && connection[node.id][i] !== 0 && copy.W[i] > (copy.W[node.id] + connection[node.id][i])) {\r\n            copy.W[i] = copy.W[node.id] + connection[node.id][i]\r\n\r\n            let j = 0\r\n            while (copy.Q.length > j && copy.W[i] > copy.Q[j].w) j++\r\n            \r\n            copy.Q.splice(j, 0, { id: i, w: copy.W[i], p: node.id })\r\n        }\r\n    }\r\n\r\n    return copy\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Draggable from 'react-draggable';\r\n\r\nimport { useInterval } from '../CHook.js';\r\n\r\nimport CSelect from '../CSelect.js';\r\nimport { Dijkstra_node_onestep } from './pf_node_solver.js';\r\n\r\nimport './pf_node.scss';\r\n\r\nfunction Node(props) {\r\n    //https://stackoverflow.com/a/63603903\r\n\r\n    // Selfnote: add (props.info.length === 0 ? \"\" : \" \" + props.info.join(\" \")) to the div if need to do multiple class\r\n\r\n    const nodeRef = React.useRef(null);\r\n\r\n    let fillColor = \"#000000\"\r\n\r\n    if (props.info.indexOf('visited') + 1) {\r\n        fillColor = \"rgba(90, 70, 70)\"\r\n    }\r\n\r\n    if (props.info.indexOf('highlight') + 1) {\r\n        fillColor = \"rgba(0, 195, 255)\"\r\n    }\r\n\r\n    if (props.info.indexOf('start') + 1) {\r\n        fillColor = \"rgb(90, 155, 25)\"\r\n    }\r\n\r\n    if (props.info.indexOf('end') + 1) {\r\n        if (props.info.indexOf('visited') + 1) {\r\n            fillColor = \"rgb(255, 0, 20)\"\r\n        }\r\n        else {\r\n            fillColor = \"rgb(130, 10, 10)\"\r\n        }\r\n    }\r\n\r\n    if (props.info.indexOf('start') + 1 && props.info.indexOf('end') + 1) {\r\n        fillColor = \"rgb(208, 210, 29)\"\r\n    }\r\n\r\n    return (\r\n        <Draggable nodeRef={nodeRef}\r\n            axis=\"both\"\r\n            bounds=\"parent\"\r\n            handle={null}\r\n            position={{ y: props.y, x: props.x }}\r\n            onDrag={props.updateLoc}\r\n            grid={null}\r\n        >\r\n            <div id=\"pf_div_node_holder\" ref={nodeRef} onMouseDownCapture={props.onInteract} onTouchStartCapture={props.onInteract}>\r\n                <div id={\"pf_node\"}\r\n                    style={{\r\n                        backgroundColor: fillColor\r\n                    }}\r\n                >\r\n                    <p id=\"pf_node_text\" dominantBaseline=\"middle\" x=\"50%\" y=\"50%\" fill=\"#fafafa\">{props.indexValue}</p>\r\n                </div>\r\n\r\n            </div>\r\n        </Draggable>\r\n    )\r\n}\r\n\r\n/*\r\n<svg id={\"pf_node\"} width=\"44\" height=\"44\">\r\n    <circle cx=\"22\" cy=\"22\" r=\"20\" stroke=\"#fafafa\" strokeWidth=\"1\" fill={fillColor}/>\r\n    <text id=\"pf_node_text\" dominantBaseline=\"middle\" x=\"50%\" y=\"50%\" fill=\"#fafafa\">{props.indexValue + 1}</text>\r\n</svg>\r\n*/\r\n\r\nfunction updateNodeLocation(original, idx, y, x) {\r\n    let newMap = [...original]\r\n\r\n    if (y === -1) {\r\n        newMap.splice(idx, 1)\r\n        return newMap\r\n    }\r\n\r\n    if (idx >= original.length) {\r\n        newMap.push({ y: y, x: x })\r\n        return newMap\r\n    }\r\n\r\n    newMap[idx].y = y\r\n    newMap[idx].x = x\r\n\r\n    return newMap\r\n}\r\n\r\nfunction updateConnection(original, idx1, idx2) {\r\n    let newMap = [...original]\r\n\r\n    newMap[idx1][idx2] = newMap[idx1][idx2] === 0 ? 1 : 0\r\n    newMap[idx2][idx1] = newMap[idx2][idx1] === 0 ? 1 : 0\r\n\r\n    return newMap\r\n}\r\n\r\nfunction updateConnectionWeight(original, idx1, idx2, newValue) {\r\n    let newMap = [...original]\r\n\r\n    if (newValue === \"\") newValue = 0\r\n\r\n    newValue = parseInt(newValue)\r\n\r\n    newMap[idx1][idx2] = newValue\r\n    newMap[idx2][idx1] = newValue\r\n\r\n    return newMap\r\n}\r\n\r\nfunction deleteConnection(original, idx) {\r\n    let newMap = [...original]\r\n\r\n    newMap.splice(idx, 1)\r\n\r\n    for (let i = 0; i < newMap.length; i++) {\r\n        newMap[i].splice(idx, 1)\r\n    }\r\n\r\n    return newMap\r\n}\r\n\r\nfunction addConnection(original, idx) {\r\n    let newMap = [...original]\r\n\r\n    newMap.push(new Array(original.length).fill(0))\r\n\r\n    for (let i = 0; i < newMap.length; i++) {\r\n        newMap[i].push(0)\r\n    }\r\n\r\n    return newMap\r\n}\r\n\r\nfunction newNodeInfo(amount, start = -1, end = -1) {\r\n    let newIndiv = new Array(amount).fill([])\r\n\r\n    if (start !== -1) {\r\n        newIndiv = newIndiv.map(nInfo => nInfo = nInfo.filter(element => element !== 'start'))\r\n        newIndiv[start].push(\"start\")\r\n    }\r\n\r\n    if (end !== -1) {\r\n        newIndiv = newIndiv.map(nInfo => nInfo = nInfo.filter(element => element !== 'end'))\r\n        newIndiv[end].push(\"end\")\r\n    }\r\n\r\n    return {\r\n        indivInfo: newIndiv,\r\n        start: start,\r\n        end: end,\r\n        backtrack: -1, // Backtrack to work with highlighting end point\r\n        //nodeAmount: 1, // Width and Height\r\n        W: new Array(amount).fill(10000000), // Weight\r\n        V: new Array(amount).fill(false), // Visited\r\n        VCount: 0,\r\n        Q: [], // Queue\r\n        P: new Array(amount).fill(null), // Node of previous movement\r\n        H: new Array(amount).fill(false), // Highlight\r\n        runState: \"run\",\r\n    }\r\n}\r\n\r\nfunction copyState(nodeAmount, nodeLocation, nodeConnection) {\r\n    let result = \"\"\r\n    let objFull = {nodeAmount: nodeAmount, nodeLocation: nodeLocation, nodeConnection: nodeConnection}\r\n\r\n    result += JSON.stringify(objFull)\r\n\r\n    navigator.clipboard.writeText(result)\r\n\r\n    alert(\"State Copied!\")\r\n}\r\n\r\nfunction PfNode(props) {\r\n    const [mouseDown, setmouseDown] = useState(false)\r\n    const [nodeAmount, setAmount] = useState(4)\r\n    const [nodeLocation, setnodeLocation] = useState([{ x: 0, y: 0 }, { x: 200, y: 0 }, { x: 0, y: 200 }, { x: 200, y: 200 }])\r\n    const [nodeConnection, setConnection] = useState([[0, 1, 1, 3], [1, 0, 1, 1], [1, 1, 0, 1], [3, 1, 1, 0]])\r\n    const [nodeInfo, setnodeInfo] = useState(newNodeInfo(4))\r\n\r\n    const [findType, setFind] = useState(\"Dijkstra\")\r\n\r\n    // Controller\r\n    const [put, setPut] = useState(0)\r\n    const [connectStart, setConnectStart] = useState(-1)\r\n\r\n\r\n    // Player states\r\n    const [isRunning, setRun] = useState(false)\r\n    const [delay, setdelay] = useState(200)\r\n    const [pastedState, setpastedState] = useState(\"\")\r\n\r\n    useInterval(() => {\r\n        let runResult = Dijkstra_node_onestep(nodeConnection, nodeInfo, nodeAmount)\r\n        setnodeInfo(runResult)\r\n        if (runResult.runState === \"done\") setRun(false)\r\n\r\n    }, isRunning ? delay : null);\r\n\r\n    const updateInfo = (pos, value) => {\r\n        let copy = nodeInfo\r\n        if (value === \"start\" || value === \"end\") {\r\n            // Go to every element on the list of info, each element is a list of basically effect, and remove the effect that is == to value\r\n            copy.indivInfo = copy.indivInfo.map(nInfo => nInfo = nInfo.filter(element => element !== value))\r\n        }\r\n        copy.indivInfo[pos].push(value)\r\n        copy[value] = pos\r\n\r\n        setnodeInfo(copy)\r\n    }\r\n\r\n    return (\r\n        <div id=\"pf_node_workspace\">\r\n            <div id=\"pf_node_info\">\r\n                <CSelect className='pf_option_search' option={['Dijkstra', 'Placeholder 2', 'Placeholder 3']} current={findType} handleChange={setFind} />\r\n            </div>\r\n            <div id=\"pf_node_item\">\r\n                <button id='node_add' onClick={() => put === 1 ? setPut(0) : setPut(1)}\r\n                    style={{ backgroundColor: put === 1 ? '#5e5e5e' : '#101010', color: put === 1 ? '#101010' : '#fafafa' }}>\r\n                    Draw\r\n                    <span className='tooltip'> Add a node </span>\r\n                </button>\r\n                <button id='node_delete' onClick={() => put === -1 ? setPut(0) : setPut(-1)}\r\n                    style={{ backgroundColor: put === -1 ? '#5e5e5e' : '#101010', color: put === -1 ? '#101010' : '#fafafa' }}>\r\n                    Delete\r\n                    <span className='tooltip'> Delete a node </span>\r\n                </button>\r\n                <button id='node_clear' onClick={() => { setAmount(0); setnodeLocation([]); setConnection([]); setnodeInfo(newNodeInfo(0)) }}\r\n                    style={{  }}>\r\n                    Clear\r\n                    <span className='tooltip'> Clear the board </span>\r\n                </button>\r\n                <button id='node_connect' onClick={() => { if (put === \"connect\") { setPut(0) } else { setPut(\"connect\"); setConnectStart(-1) } }}\r\n                    style={{ backgroundColor: put === \"connect\" ? connectStart !== -1 ? '#ffff7f' : '#5e5e5e' : '#101010', color: put === \"connect\" ? '#101010' : '#fafafa' }}>\r\n                    Connect\r\n                    <span className='tooltip'> Connect 2 node </span>\r\n                </button>\r\n                <button id='node_start_point' onClick={() => put === 'start' ? setPut(0) : setPut('start')}\r\n                    style={{ backgroundColor: put === 'start' ? '#5e5e5e' : '#101010', color: put === 'start' ? '#101010' : '#fafafa' }}>\r\n                    Start\r\n                    <span className='tooltip'> Next Node click will determine the start point </span>\r\n                </button>\r\n                <button id='node_end_point' onClick={() => put === 'end' ? setPut(0) : setPut('end')}\r\n                    style={{ backgroundColor: put === 'end' ? '#5e5e5e' : '#101010', color: put === 'end' ? '#101010' : '#fafafa' }}>\r\n                    End\r\n                    <span className='tooltip'> Next Node click will determine the end point </span>\r\n                </button>\r\n            </div>\r\n            <div id=\"pf_node_screen\" onMouseDown={() => setmouseDown(true)} onMouseUp={() => setmouseDown(false)}>\r\n                <div id=\"pf_node_map\" style={{ position: \"relative\" }}\r\n                    onClick={(e) => {\r\n                        let rect = e.target.getBoundingClientRect()\r\n                        if (put === 1) { // Add a note to the map\r\n                            // Set the location of the new node\r\n                            setnodeLocation(updateNodeLocation(nodeLocation, nodeAmount, e.pageY - rect.top - 22, e.pageX - rect.left - 22))\r\n                            // Add a new line of connection to every node while maintaining the old connection\r\n                            setConnection(addConnection(nodeConnection, nodeAmount))\r\n                            // Reset map/node info\r\n                            setnodeInfo(newNodeInfo(nodeAmount + 1))\r\n                            setAmount(nodeAmount + 1)\r\n                        }\r\n                    }}\r\n                >\r\n                    <svg id=\"pf_node_pathDraw\" style={{ height: \"100%\", width: \"100%\", position: 'absolute', top: '0px', left: '0px' }}>\r\n                        {nodeConnection.map((node1, index1) => node1.map((node2, index2) => {\r\n                            if (index1 != null && index2 != null && index2 > index1 && node2 > 0) {\r\n                                return (\r\n                                    <line\r\n                                        key={index1 * nodeAmount + index2}\r\n                                        // Draw each line by checking the connection, offset so it always draws from the middle\r\n                                        x1={nodeLocation[index1].x + 22}\r\n                                        y1={nodeLocation[index1].y + 22}\r\n                                        x2={nodeLocation[index2].x + 22}\r\n                                        y2={nodeLocation[index2].y + 22}\r\n                                        style={{\r\n                                            // If the precious of one is the other, make the line prettier\r\n                                            stroke: (nodeInfo.P[index2] === index1 || nodeInfo.P[index1] === index2) ? (nodeInfo.H[index2] && nodeInfo.H[index1]) ? \"rgb(208, 210, 29)\" : \"rgb(40, 153, 225, 0.7)\" : \"rgba(239,239,239, 0.5)\",\r\n                                            strokeWidth: (nodeInfo.P[index2] === index1 || nodeInfo.P[index1] === index2) ? \"1.8\" : \"1\"\r\n                                        }}\r\n                                    />\r\n                                )\r\n                            }\r\n                        })\r\n                        )}\r\n                    </svg>\r\n\r\n                    {nodeConnection.map((node1, index1) => node1.map((node2, index2) => {\r\n                        if (index1 != null && index2 != null && index2 > index1 && node2 > 0) {\r\n                            let x = (nodeLocation[index1].x + nodeLocation[index2].x + 44) / 2 - 12 + 'px'\r\n                            let y = (nodeLocation[index1].y + nodeLocation[index2].y + 44) / 2 - 10 + 'px'\r\n                            return (\r\n                                <div id=\"connection_weight\" key={index1 * nodeAmount + index2}\r\n                                    style={{ position:'absolute', top:y, left:x }}\r\n                                >\r\n                                    <input value={nodeConnection[index1][index2]} type=\"number\" \r\n                                        onChange={e => {setConnection(updateConnectionWeight(nodeConnection, index1, index2, e.target.value))}}\r\n                                        style= {{ color: (nodeInfo.P[index2] === index1 || nodeInfo.P[index1] === index2) ? (nodeInfo.H[index2] && nodeInfo.H[index1]) ? \"rgb(208, 210, 29)\" : \"rgb(40, 153, 225, 0.7)\" : \"rgba(239,239,239, 0.5)\"}}\r\n                                    >\r\n                                        \r\n                                    </input>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })\r\n                    )}\r\n\r\n                    <div id=\"draggable_holder\" style={{ height: \"100%\", width: \"100%\", zIndex: \"1\", backgroundColor: \"#00000000\" }}>\r\n                        {nodeLocation.map((node, index) =>\r\n                            <Node\r\n                                indexValue={index}\r\n                                key={index}\r\n                                y={node.y}\r\n                                x={node.x}\r\n                                info={nodeInfo.indivInfo[index]}\r\n                                onInteract={() => {\r\n                                    if (put === -1) {\r\n                                        // Delete a node, kinda the same as the \"add\"\r\n                                        setnodeLocation(updateNodeLocation(nodeLocation, index, -1, -1))\r\n                                        setConnection(deleteConnection(nodeConnection, index))\r\n                                        setnodeInfo(newNodeInfo(nodeAmount - 1))\r\n                                        setAmount(nodeAmount - 1)\r\n                                    }\r\n\r\n                                    if (put === \"connect\") {\r\n                                        if (connectStart === -1) {\r\n                                            setConnectStart(index)\r\n                                        }\r\n                                        else {\r\n                                            setConnection(updateConnection(nodeConnection, connectStart, index))\r\n                                        }\r\n                                    }\r\n                                    if (put === \"start\" || put === \"end\") {\r\n                                        updateInfo(index, put)\r\n                                    }\r\n                                }}\r\n                                updateLoc={(e, pos) => setnodeLocation(updateNodeLocation(nodeLocation, index, pos.y, pos.x))}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div id=\"pf_node_info\">\r\n                    <div id='pf_node_player'>\r\n                        <button id='pf_node_run' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setRun(!isRunning)}> Play\r\n                        </button>\r\n                        <button id='pf_node_step' style={{ backgroundColor: isRunning ? '#5e5e5e' : '#101010' }}\r\n                            onClick={() => setnodeInfo(Dijkstra_node_onestep(nodeConnection, nodeInfo, nodeAmount))}> Step\r\n                        </button>\r\n                        <button id='pf_node_reset' style={{ backgroundColor: '#101010' }}\r\n                            onClick={() => {\r\n                                setRun(false)\r\n                                setnodeInfo(newNodeInfo(nodeAmount, nodeInfo.start, nodeInfo.end))\r\n                            }}>\r\n                            Reset\r\n                        </button>\r\n                        <label htmlFor='pf_node_delay'>Delay</label>\r\n                        <input defaultValue={delay} type='number' id='pf_node_delay' name='pf_node_delay'\r\n                            onChange={e => setdelay(isNaN(parseInt(e.target.value)) ? 1 : parseInt(e.target.value) > 1 ? parseInt(e.target.value) : 1)}\r\n                        />\r\n                    </div>\r\n                    <div id=\"pf_node_stateboard\">\r\n                        <div id=\"pf_node_state_copypaste\">\r\n                            <button id=\"pf_node_copy_state\" onClick={() => copyState(nodeAmount, nodeLocation, nodeConnection)} > Copy State to Clipboard </button>\r\n                            <button id=\"pf_node_paste_state\" \r\n                                onClick={() => {  \r\n                                    let newState = JSON.parse(pastedState)\r\n                                    if (pastedState !== \"\"){\r\n                                        setAmount(newState.nodeAmount)\r\n                                        setnodeLocation(newState.nodeLocation)\r\n                                        setConnection(newState.nodeConnection)\r\n                                        setnodeInfo(newNodeInfo(newState.nodeAmount))\r\n                                        setpastedState(\"\")\r\n                                    }\r\n                                }}\r\n                            > \r\n                                Paste State to Board \r\n                            </button>\r\n                            <input type='text' id='pf_node_paste_text' onChange={e => setpastedState(e.target.value)}></input>\r\n                            \r\n                        </div>\r\n\r\n                        <div id=\"node_location_infoboard\">\r\n                        {nodeLocation.map((node, index) =>\r\n                            <div id=\"node_location_info\" key={index}>\r\n                                {index}. x:{node.x.toFixed(2)} - y:{node.y.toFixed(2)}\r\n                            </div>\r\n                        )}\r\n                        </div>\r\n\r\n                        <div id=\"node_connection_infoboard\">\r\n                            Filter\r\n                        </div>\r\n                    </div>\r\n                    <ul id='pf_node_queue'>\r\n                        {\r\n                            nodeInfo.Q.length === 0 ? <div id=\"empty_queue\" /> :\r\n                                nodeInfo.Q.map((path, index) => {\r\n                                    return (\r\n                                        <li id=\"path_queue\" key={index} >\r\n                                            {index}. Path: {path.p} - {path.id}, Weight: {path.w}\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const PathfindNode = React.memo(PfNode);","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport CSelect from '../component/CSelect';\r\n\r\nimport  { PathfindMaze } from '../component/pathfind/pf_maze';\r\nimport { PathfindNode } from '../component/pathfind/pf_node';\r\n\r\n//import {Helmet} from \"react-helmet\";\r\n\r\nimport './ss/path_find.scss';\r\n\r\nfunction Pathfind(props) {\r\n    if (props.type === 'Maze') return (<PathfindMaze find={props.find} />)\r\n    if (props.type === 'Nodes') return (<PathfindNode find={props.find} />)\r\n    return (\r\n        <div id='pf_screen'>\r\n            <div id='pf_map'>\r\n                uwu\r\n            </div>\r\n            <div id='pf_info'>\r\n                uwu\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Pathfind_page() {\r\n    const [mapType, setmapType] = useState(\"Nodes\")\r\n\r\n    return (\r\n        <div id=\"pathfind_page\">\r\n            <h1> Yoooooo this is the path find page      <a href=\"./#/\"> Go back </a> </h1>\r\n\r\n            <div id=\"pathfind_option\">\r\n                <CSelect className='pf_option_map' option={['Maze', 'Nodes']} current={mapType} handleChange={setmapType} />\r\n            </div>\r\n\r\n            <Pathfind type={mapType} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pathfind_page;","import './App.scss';\nimport { Route, Switch, Link, HashRouter as Router} from 'react-router-dom';\n\nimport Lobby from \"./page/lobby.js\"\nimport Pathfind_page from \"./page/path_find.js\"\n\nfunction App() {\n  return (\n      <Router>\n      <div id=\"app\">\n        <Route exact path=\"/path-find\" component={Pathfind_page} />\n        <Route exact path=\"/\" component={Lobby} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}